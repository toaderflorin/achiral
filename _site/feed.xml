<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-09-17T13:12:05+03:00</updated><id>http://localhost:4000/</id><title type="html">achiral</title><subtitle>achiral offers consulting and custom software development services on the node.js, Ruby on Rails and .NET stacks.
</subtitle><entry><title type="html">ES6 Modules And Node.js</title><link href="http://localhost:4000/es6-modules-node" rel="alternate" type="text/html" title="ES6 Modules And Node.js" /><published>2017-09-15T09:39:37+03:00</published><updated>2017-09-15T09:39:37+03:00</updated><id>http://localhost:4000/es6-modules-node</id><content type="html" xml:base="http://localhost:4000/es6-modules-node">&lt;p&gt;With the addition of &lt;em&gt;async/await&lt;/em&gt; and classes in Javascript and subsequently in V8, many more developers started considering that Node.js is actually a platform worth considering. I do believe Node was worth considering before, but I see their point — its asynchronous nature made callbacks quite unpleasant to work with. Promise chaining changed this a bit, but it’s a far cry from writing code using async/await and actually, as of lately, it’s possible to write Javascript serverside code almost entirely in ES6 without Babel, with a notable exception…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/es6-mods.jpg&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You cannot use ES6 imports YET.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Which seems to be a little bit weird because you’d guess that it’s probabably one of the easiest things to be implemented in a JS engine. But you’d be wrong because supporting this of Node.js is not exactly a walk in the park, considering there are quite a lot of applications out there and they using a different module standard: CommonJS.&lt;/p&gt;

&lt;p&gt;And serverside applications are a big part of the JS landscape.&lt;/p&gt;

&lt;h2 id=&quot;es6-modules-versus-commonjs&quot;&gt;ES6 Modules Versus CommonJS&lt;/h2&gt;
&lt;p&gt;On the surface, they seem similary, but they are not. There is a fundamental difference between the two: &lt;em&gt;the code in the CommonJS module needs to be executed to see what that module exports, whereas an ES6 module needs only to be parsed (compiled).&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;
// this code is imperative, so it needs to be run to get the result
var MyClass = function () {
}
module.exports = MyClass
&lt;/pre&gt;

&lt;p&gt;whereas ES6 exports look like this:&lt;/p&gt;

&lt;pre&gt;
// this one is declarative
class MyClass {
}
export default MyClass
&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Ideally, we’d want to be able to write new ES6 code that would run alongside old code, which means we want to be able to import CommonJS modules, as well as require new ES6 modules.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So what a CJS module exports is available only at runtime, NOT at compile time (remember V8 does just-in-time compilation). Also, the existing &lt;em&gt;require()&lt;/em&gt; function is synchronous, whereas the ES6 specification states that imports can be async (but DON’T HAVE TO BE, which is good news for Node). Changing the existing implementation for &lt;em&gt;require()&lt;/em&gt; would also break a lot of the existing libraries which make assumptions about the way it works. Since the require function is synchronous, module resolution in CJS happens in one event loop tick. With ES6, the module is first parsed and its interface infered, and ONLY THEN evaluated, so it might take multiple ticks.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;This means it won’t be possible to change &lt;em&gt;require()&lt;/em&gt; to import ES6 modules. The alternative would be to create a new &lt;em&gt;require.import()&lt;/em&gt; function, but this isn’t as nice.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It does however mean that ES6 modules will be able to import CommonJS modules, because they happen in one tick. The tricky part here is figuring if a module is ES6 or CommonJS.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Browsers know that a module is ES6 or not like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;script type=&quot;module&quot; src=&quot;./es6module.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;

&lt;p&gt;However Node.js doesn’t have that luxury. The solution the community agreed upon was using &lt;em&gt;.mjs&lt;/em&gt; files to denote ES6 modules, also affectionally named the &lt;strong&gt;Michael Jackson Solution&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;While this is work in progress, so far it’s fair to assume that:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The &lt;em&gt;require()&lt;/em&gt; function won’t be available in ES6 module files.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;import&lt;/em&gt; won’t be available to CommonJS modules.&lt;/li&gt;
  &lt;li&gt;ES6 modules will be able to import CJS modules, as well as other ES6 modules (obviously).&lt;/li&gt;
  &lt;li&gt;CJS modules will be able to &lt;em&gt;require.import()&lt;/em&gt; ES6 modules, as well as other CJS modules using &lt;em&gt;require()&lt;/em&gt; like before.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Also, there is an issue with named imports when importing a CommonJS module. The difference again has to do with with the fact the public interface of an ES6 module can be determined at compile time, whereas CommonJS modules actually have to be executed.&lt;/p&gt;

&lt;p&gt;Which means for a CJS module that looks like this:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/9767933b001009e22e308646bded11fb.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The importing code would look like:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/065b799bf404d013d39990d9f19d9482.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Keep in mind that defaultImport will not be ‘some_text’ because &lt;em&gt;import&lt;/em&gt; doesn’t evaluate the code. It would actually be an object containing all the objects declared which would look like this in our case:&lt;/p&gt;

&lt;pre&gt;
{
  someFunc: Function,
  someOtherFunc: Function
}
&lt;/pre&gt;

&lt;p&gt;Also, we are probably looking at beginning 2018 before any of this functionality is available.&lt;/p&gt;</content><author><name></name></author><summary type="html">With the addition of async/await and classes in Javascript and subsequently in V8, many more developers started considering that Node.js is actually a platform worth considering. I do believe Node was worth considering before, but I see their point — its asynchronous nature made callbacks quite unpleasant to work with. Promise chaining changed this a bit, but it’s a far cry from writing code using async/await and actually, as of lately, it’s possible to write Javascript serverside code almost entirely in ES6 without Babel, with a notable exception…</summary></entry><entry><title type="html">Understanding Web Application Security</title><link href="http://localhost:4000/web-security" rel="alternate" type="text/html" title="Understanding Web Application Security" /><published>2017-09-13T09:39:37+03:00</published><updated>2017-09-13T09:39:37+03:00</updated><id>http://localhost:4000/web-security</id><content type="html" xml:base="http://localhost:4000/web-security">&lt;p&gt;I can testify that a lot of people confined in me they considered doing this (including yours truly) under the frustration of the bi-monthly administrative policies that mandated we change our workstation password:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/my-password.jpg&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This sort of thing happens more than you would imagine—what a lot of people don’t know is that hackers rely a lot on &lt;em&gt;social engineering&lt;/em&gt; to gain access to systems. Mitnick was famous for calling in, pretending to be somebody he wasn’t and asking for somebody’s password in order to “perform some maintainance”.&lt;/p&gt;

&lt;h2 id=&quot;phishing&quot;&gt;Phishing&lt;/h2&gt;
&lt;p&gt;If you’ve followed the US 2016 election cycle news, you might have heard that John Podesta was hacked. We was actually the victim of a &lt;em&gt;phising&lt;/em&gt; scam whereby he received an email made to look like an email from Google (he was using Gmail) that informed him that he needed to change his password because unauthorized access to his account was detected. He fell for it, clicked on the link which redirected him to a page that looked like a Google page (he didn’t pay attention to the URL it seems), and he entered his old and &lt;em&gt;supposedly&lt;/em&gt; new credentials.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;But this is a scam, it’s not what I wanted to talk about, because YOU as a developer cannot do anything about it. I actually want to talk about REAL  vulnerabilities in the software and how they can be addressed, which means understanding the vectors attackers have at their disposal.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There are quite a lot of developers that when it comes to web application security they rely on whatever framework they are using to take care of that for them, but don’t really have an understanding of what’s happening behind the scenes. Web application security is quite a complex topic, we will be covering:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Cross-site scripting, also called XSS scripting&lt;/li&gt;
  &lt;li&gt;Session hijacking&lt;/li&gt;
  &lt;li&gt;Cross-site request forgery, or CSRF&lt;/li&gt;
  &lt;li&gt;SQL injection&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Both XSS and SQL Injection are cases of &lt;em&gt;code injection&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;cross-site-scripting&quot;&gt;Cross-Site Scripting&lt;/h2&gt;
&lt;p&gt;XSS refers to a vulnerabity where an attacker is able to “inject” Javascript code that will be run by the application. In my previous article, I’ve discussed the &lt;a href=&quot;http://achiral.io/cors-made-simple&quot;&gt;same-origin&lt;/a&gt; policy concept at length which states that if content from one site is granted permission to access resources on a system, then any content from that site will share these permissions, while content from another site will have to be granted permissions separately.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;A lot of people think that SOP prevents XSS attacks. This is &lt;b&gt;not the case.&lt;/b&gt;&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;A typical example of XSS is &lt;em&gt;persistent cross-site scripting&lt;/em&gt;. If a page isn’t properly &lt;em&gt;sanitizing&lt;/em&gt; the user input (a field in a for, for example), a user could actually type in valid Javascript code, which is going to be saved by the application in its database and be subsequently rendered everytime it displays a page. Imagine you have a page that is visible to multiple users (such as a product page) which allows for users to add comments. If the page is not escaping user input, it is possible for a malicious user to write actual an script block, which will then be rendered to all users as part of the page HTML. The Javascript code has access to the cookies of that user and it can send that information to the a attacker.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/attack.png&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;An alternative is the &lt;em&gt;reflected&lt;/em&gt; (or non-persistent) XSS atack, whereby the user’s input is not stored in the database, but returned back in the same way it was inputed. It works like this: say you have a page that allows you to search for products. The user types some text in the search box and clicks the search button which sends a GET request to the server.&lt;/p&gt;

&lt;pre&gt;
GET http://www.onlineshop.com?search=something
&lt;/pre&gt;

&lt;p&gt;If the site finds something, it returns a list of results, but if it doesn’t, it’s going to say&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Your search, ‘something’, returned no results.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;… which is just the original, unaltered string. A crafty attacker might see this vulnerability and might send an email to the user asking him to click on a link which for the search term, contains some nefarious script block. If the user clicks on the link (which is likely because most people don’t hover on links to see where they lead to), the application server won’t be able to find any result, and will return with a &lt;em&gt;not found&lt;/em&gt; page containing the script rendered directly on the page.&lt;/p&gt;

&lt;pre&gt;
GET http://www.onlineshop.com?
  search=%3Cscript%2520src%3D%22http%3A%2F%2Fsomesite.com%2Fscript.js%22%3E%3C%2Fscript%3E 
  HTTP/1.1
&lt;/pre&gt;

&lt;p&gt;This script can then hijack the session cookie, like in the previous example.&lt;/p&gt;

&lt;p&gt;What can we do about it? Actually two things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Validate inputs: this means checking that the user didn’t try to input any funky stuff and warning him if this is the case.&lt;/li&gt;
  &lt;li&gt;Sanitize outputs: everything that’s rendered to the bage must be HTML escaped. This means that script blocks will be displayed as text, and won’t be part of the DOM, and thus executed.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you are developing with Node / Express, there are plenty of packages to help you safeguard against XSS attacks, such as &lt;a href=&quot;https://www.npmjs.com/package/helmet&quot;&gt;helmet&lt;/a&gt; or &lt;a href=&quot;https://www.npmjs.com/package/xssfilter&quot;&gt;xssfilter&lt;/a&gt; etc.&lt;/p&gt;

&lt;h2 id=&quot;session-hijacking&quot;&gt;Session Hijacking&lt;/h2&gt;
&lt;p&gt;Most web applications use a session mechanism which allows the server hosting the web application to know which user is making a specific request. Sessions usually involve authenticating the user, creating some sort of &lt;em&gt;session_id&lt;/em&gt; (usually a string) and setting a cookie with that value on the user’s browser. Session hijacking is a way of getting to know that string.&lt;/p&gt;

&lt;p&gt;One way to gain access to it is, as I mentioned, cross-site scripting. Another typical way of gaining access to that cookie is by sniffing packets. Since browsers send the cookies asociated with a domain for every request, somebody sniffing traffic would be able to see also the value of the session cookie. A typical way to sniff traffic is to set up an unencrypted wifi hot spot in a public place, and monitor the traffic of the people connecting to it. Does this mean I cannot use my online banking when I am connected to a public hotspot? No, because if the website uses SSL for all requests, the contents of the traffic won’t be intelligible to a man-in-the-middle, and usually major sites like Facebook / Twitter, online banking etc. are pretty well secured. There are however plenty of smaller poorly written sites that only use SSL for the login page, and then pass the session cookie unencrypted to other pages.&lt;/p&gt;

&lt;p&gt;Another way to gain access to a user’s session is to get that user to install a mallware on his/hers computer. Since browsers usually store cookies on disk, that mallware would be able to access the cookie if it knows where to look for it.&lt;/p&gt;

&lt;p&gt;A yet another way of acomplishing session hijacking is &lt;em&gt;session fixation&lt;/em&gt;. There are plenty of sites that accept a session ID in the URL, such as:&lt;/p&gt;

&lt;pre&gt;
http://www.website.com?sid=asb1sadasdasdan23123
&lt;/pre&gt;

&lt;p&gt;The reason why they do it is because a lot of users turn of their cookies, ironically, for security reasons. This however would open them up to scams, like somebody sending them an email which says:&lt;/p&gt;

&lt;blockquote&gt;
Hey, click on http://www.website.com?sid=asb1sadasdasdan23123, and enter credit card and address information to receive a free bonus on your order.
&lt;/blockquote&gt;

&lt;p&gt;Since the attacker knows the session id, he/she can also log to that page and see the information inputed by the user.&lt;/p&gt;

&lt;h2 id=&quot;cross-site-request-forgery&quot;&gt;Cross-Site Request Forgery&lt;/h2&gt;
&lt;p&gt;CSRF is an attack that tricks the victim into submitting a malicious request. Since the browser usually sends the session cookie with the request, the server perceivs the request as legitimate. An important part of CSRF attacks is &lt;em&gt;social engineering&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/csfr.png&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s say a site exposes some functionality in the form of a web request, like so:&lt;/p&gt;

&lt;pre&gt;
GET https://www.thesite.com/account?password=val HTTP/1.1
&lt;/pre&gt;

&lt;p&gt;This example is a bit contrived and oversimplified, but you get the picture. If the attacker can get the user to click on a link which points to that link &lt;strong&gt;while logged in&lt;/strong&gt;, that’s going to have the effect of changing the password for the user to whatever the attacker wants. This link can be part of an email, or it can be part of a message on a public board or a website set up by the attacker etc.&lt;/p&gt;

&lt;p&gt;An action that changes the password will more likely be a POST than a GET, but that doesn’t make it CSRF-proof either, because a user can be tricked into submiting a form. Here’s how that would work: you could have a form with a hidden input like so:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/6862d6a60d2dc4418a38fd81ae69e5bd.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Using HTML forms with email is not really possible, because a lot of clients disable them or warn about them, but you could redirect the user to a page hosted somewhere. It turns out you don’t even have to trick him/her to click on the submit button, that can be done by the site using Javascript (say by reacting to the document load event).&lt;/p&gt;

&lt;p&gt;How about PUT and DELETE? Turns out that the &lt;em&gt;same-origin policy&lt;/em&gt; helps us here, because attackers cannot do XHR requests from their site to the &lt;em&gt;http://www.thesite.com&lt;/em&gt;. It’s also why for POST attacks a form is being used instead of an POST XHR. SOP blocks that too.&lt;/p&gt;

&lt;h2 id=&quot;sql-injection&quot;&gt;SQL Injection&lt;/h2&gt;
&lt;p&gt;And last (in our article), but certainly not least, we have SQL injection. I think most of us remember this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/exploit.png&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For SQL injection to work, you’d have to be writing your SQL queries using string interpolation / concatenation.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/e842b81f3e4d1fef85087134717a1571.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;As you can see, the text fits nicely in the query. The way you get around this is by using parameters, which are supported by all database systems.&lt;/p&gt;</content><author><name></name></author><summary type="html">I can testify that a lot of people confined in me they considered doing this (including yours truly) under the frustration of the bi-monthly administrative policies that mandated we change our workstation password:</summary></entry><entry><title type="html">CORS Made Simple</title><link href="http://localhost:4000/cors-made-simple" rel="alternate" type="text/html" title="CORS Made Simple" /><published>2017-09-09T06:39:37+03:00</published><updated>2017-09-09T06:39:37+03:00</updated><id>http://localhost:4000/cors-made-simple</id><content type="html" xml:base="http://localhost:4000/cors-made-simple">&lt;p&gt;CORS stands for &lt;em&gt;Cross-Origin Resource Sharing&lt;/em&gt; and if you’ve built rich client applications that communicate with an API via REST, you have probably crossed paths with something known as &lt;em&gt;same-origin policy&lt;/em&gt;. What this policy refers to is that an application cannot access resources via &lt;a href=&quot;https://www.w3schools.com/xml/xml_http.asp&quot;&gt;XMLHttpRequest&lt;/a&gt; or the &lt;a href=&quot;https://developers.google.com/web/updates/2015/03/introduction-to-fetch&quot;&gt;Fetch API&lt;/a&gt; that come from a different URL than where the page was originally served from.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/cors.png&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is a restriction implemented on the browser level—if you load a page that contains Javascript that is attempting to do an XHR request, you are are going to get an error. CORS is a mechanism to bypass this restriction. It allows the server to “accept” calls incoming from a different origin. The reason I am using quotes is because, as previously mentioned, it’s actually the browser that implements the restriction, but the server has the option of specifying several headers in the response that will make the browser accept the response.&lt;/p&gt;

&lt;h2 id=&quot;specifics&quot;&gt;Specifics&lt;/h2&gt;
&lt;p&gt;OK, so let’s get into specifics: first let’s see what exactly constitutes the same origin and what is a different origin. The policy looks at the protocol (http or https), port number and host URL. Let’s assume that our page is served from &lt;em&gt;http://domain1.page.com/index.html&lt;/em&gt;. Accessing the following URLs will give the following results:&lt;/p&gt;

&lt;pre&gt;
http://domain1.page.com/items/3213
# Success.

https://domain1.page.com/items/12
# This fails because it's using https instead of http.

http://somethingelse.com/
# Fails because it's a totally different domain.

http://domain2.page.com/items/32
# Fails because the subdomain is different

http://domain1.page.com:9000/items/32
# Fails because the port is different.
&lt;/pre&gt;

&lt;p&gt;Of course, if you ever built applications using a microservice architecture, you know that sometimes it’s desirable to allow access to the backend for applications that will be hosted elsewhere, but you don’t necesarily want to open access to everybody. So CORS is sort of a middle-road between the two and it comes in handy when your applications are distributed because sometimes you just want to hook up things without configuring proxies and whatnot.&lt;/p&gt;

&lt;blockquote&gt;
We first must make the distinction between &lt;b&gt;simple requests&lt;/b&gt; and &lt;b&gt;preflighted requests&lt;/b&gt;.
&lt;/blockquote&gt;

&lt;p&gt;A simple request is a GET, POST or HEAD that meets a few conditions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;No event listeners are registered on any &lt;em&gt;XMLHttpRequestUpload&lt;/em&gt; object used in the request and no &lt;em&gt;ReadableStream&lt;/em&gt; object is used in the request.&lt;/li&gt;
  &lt;li&gt;The only accepted headers are “CORS”: &lt;em&gt;Accept, Accept-Language, Content-Language, Content-Type, Last-Event-ID, DPR, Downlink, Save-Data, Viewport-Width&lt;/em&gt; and &lt;em&gt;Width&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;The accepted values for the Content header are: &lt;em&gt;application/x-www-form-urlencoded, multipart/form-data&lt;/em&gt; and &lt;em&gt;text/plain&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If the server supports CORS, it will return a response specifying a value for the &lt;em&gt;Access-Control-Allow-Origin&lt;/em&gt; header:&lt;/p&gt;

&lt;pre&gt;
Access-Control-Allow-Origin: *
# this allows access from any origin

Access-Control-Allow-Origin: http://domain2.page.com
# allows access from domain2.page.com

# etc.
&lt;/pre&gt;

&lt;p&gt;A &lt;em&gt;preflighted request&lt;/em&gt; is one that &lt;strong&gt;automatically&lt;/strong&gt; triggers an OPTIONS call to the server before the actual request. It looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/cors_flow.png&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;If any of the conditions for the request to be a simple request is violated, then we have a preflighted request on our hand. Which means that if we want to support CORS, our server needs to be able to respond to OPTIONS requests accordingly.&lt;/p&gt;

&lt;p&gt;This means we need someting like:&lt;/p&gt;

&lt;pre&gt;
HTTP/1.1 200 OK
...
Access-Control-Allow-Origin: http://page.com
Access-Control-Allow-Methods: POST, GET, OPTIONS
Access-Control-Allow-Headers: Content-Type
&lt;/pre&gt;

&lt;p&gt;…in order to tell the browser it’s actually OK to send the real request.&lt;/p&gt;

&lt;p&gt;The whole concept of a “preflight request” seems a bit strange and you might be wondering why it was included in the spec. Couldn’t all requests be made without a preflight? A key concept to understand is that the role of the OPTIONS request doesn’t have to do with security.&lt;/p&gt;

&lt;blockquote&gt;
Preflight requests have the role of preserving the semantics of the web before CORS.
&lt;/blockquote&gt;

&lt;p&gt;In most previous applications (before REST and client side applications became popular) involved GETs for retrieving webpages, and POSTs for posting back form data. Old webserver which are CORS agnostic would never expect to receive a cross-domain DELETE request, and might behave unexpectly in such cases. The preflight request is a way around this potential issue – it allows to actually query the backend and see if it supports CORS in a safe manner. You might have noticed that the allowed verbs are the ones that read and create data but NOT the ones that can modify existing information – like DELETE and PUT. Now you might be wondering: &lt;em&gt;couldn’t somebody just send a DELETE request via a tool like Postman, since CORS is implemented on the browser level?&lt;/em&gt; Sure, but that wouldn’t be a problem because backend services usually require authentication that would be stored locally in the form of a cookie and would be accessible to Javascript running in the browser but not to somebody doing a request using Postman.&lt;/p&gt;

&lt;h2 id=&quot;in-closing&quot;&gt;In Closing&lt;/h2&gt;
&lt;p&gt;Of course, you probably don’t want to be doing all that yourself, which is why there are libraries for supporting CORS in most platforms. If you’re using Node, it’s very simple to support CORS by using the &lt;a href=&quot;https://www.npmjs.com/package/cors&quot;&gt;cors library&lt;/a&gt; which is just simple Express middleware.&lt;/p&gt;

&lt;pre&gt;
npm install cors --save
&lt;/pre&gt;

&lt;p&gt;Using it is also very simple, it just needs to be registered as a middleware with Express.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/de8610422124cce393883120e77e150b.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Configuring Rails to use CORS is equally easy.&lt;/p&gt;</content><author><name></name></author><summary type="html">CORS stands for Cross-Origin Resource Sharing and if you’ve built rich client applications that communicate with an API via REST, you have probably crossed paths with something known as same-origin policy. What this policy refers to is that an application cannot access resources via XMLHttpRequest or the Fetch API that come from a different URL than where the page was originally served from.</summary></entry><entry><title type="html">Hot Module Reloading With Wepack, React And Babel</title><link href="http://localhost:4000/react-hmr" rel="alternate" type="text/html" title="Hot Module Reloading With Wepack, React And Babel" /><published>2017-09-07T06:39:37+03:00</published><updated>2017-09-07T06:39:37+03:00</updated><id>http://localhost:4000/react-hmr</id><content type="html" xml:base="http://localhost:4000/react-hmr">&lt;p&gt;Here’s what most people that worked with Webpack would agree: setting it up is not exactly a walk in the park, especially if you are trying to do multiple things at once like transpiling from ES6, using hot reloading and proxying your backend. But that’s what I am trying to change with this article.&lt;/p&gt;

&lt;p&gt;We are going to use the application we built in the &lt;a href=&quot;http://achiral.io/ruby-object-model&quot;&gt;previous article&lt;/a&gt; and add HMR to it. First of all, in order to use Hot Module Reloading in Webpack we must use the Webpack Dev Server which is essentially a Node / Express wrapper. Second, the HMR module doesn’t do a whole lot unless we are able to take advantage of it, and this is where the React HMR module comes in. Third, because we want to use ES6, we’ll be using the &lt;em&gt;babel-es2015-preset&lt;/em&gt; and we will be configuring a &lt;a href=&quot;https://webpack.js.org/concepts/#loaders&quot;&gt;loader&lt;/a&gt; for Webpack. Also we are going to use Babel to transpile the .jsx syntax.&lt;/p&gt;

&lt;blockquote&gt;
Webpack at its core is just a module bundler. It essentially detects dependencies between the building blocks of your application (like code files, style files etc.) and creates a bundle out of everything.
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/images/schematic.png&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It doesn’t actually do things like transpilation — if you have Coffeescript code, Typescript or ES6 code, you will have to use a loader. We will be using &lt;em&gt;babel-loader&lt;/em&gt; to compile our ES6/jsx code and feed it into Webpack.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/images/webpack-schematic.png&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;On the other side of the chain there are &lt;a href=&quot;https://webpack.js.org/concepts/#plugins&quot;&gt;plugins&lt;/a&gt; like uglifyJS (which we’re not using in the code sample, but I’ve added it in the drawing as an example of a plugin), which is a Javascript minifier. Another plugin example is &lt;em&gt;webpack-dev-server&lt;/em&gt; which we will be using to implement hot reloading.&lt;/p&gt;

&lt;h2 id=&quot;lets-jump-right-in&quot;&gt;Let’s Jump Right In&lt;/h2&gt;
&lt;p&gt;The dependencies section of the &lt;em&gt;package.json&lt;/em&gt; file look like this:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/a7470f4ca4cadea9e8bc86573ecc4215.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Our &lt;em&gt;.babelrc&lt;/em&gt; file looks like this:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/f2264a5abc5f1ee8904ff6b93aa18feb.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;And finally, let’s have a look at the Webpack configuration page.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/cff7cfbc3619a8115c880a22c8530697.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;adding-hot-reloading&quot;&gt;Adding Hot Reloading&lt;/h2&gt;
&lt;p&gt;Webpack Hot Module Replacement works by adding a small runtime to the generated bundle (which is going to run alongside your app) that constantly communicates with the server and if part of the dependency tree changes, it will inject the new dependencies. However, in order for this process to take place, we need to setup the Webpack Development Server, which means we need to add the following lines of code in the &lt;em&gt;webpack.config.js&lt;/em&gt; file in the configuration object.&lt;/p&gt;

&lt;pre&gt;
plugins: [
  new webpack.HotModuleReplacementPlugin()
],
devServer: {  
  proxy: {
    '*': 'http://localhost:3000'
  },
  hot: true,
  contentBase: './src/static', 
  port: 9000   
}
&lt;/pre&gt;

&lt;p&gt;Second, we actually need React to &lt;strong&gt;do something&lt;/strong&gt; when the bundle changes, which is where the &lt;em&gt;react-hot-loader&lt;/em&gt; package comes into play. A module can only be updated if you “accept” it. So you need to &lt;em&gt;module.hot.accept()&lt;/em&gt; the module in the parents or the parents of the parents.&lt;/p&gt;

&lt;p&gt;Have a look at the following code:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/d4d9e62d2b36d768bbefc78c7c084817.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;You can find the source code &lt;a href=&quot;https://github.com/toaderflorin/react-hmr&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">Here’s what most people that worked with Webpack would agree: setting it up is not exactly a walk in the park, especially if you are trying to do multiple things at once like transpiling from ES6, using hot reloading and proxying your backend. But that’s what I am trying to change with this article.</summary></entry><entry><title type="html">The Ruby Object Model And Metaprogramming</title><link href="http://localhost:4000/ruby-object-model" rel="alternate" type="text/html" title="The Ruby Object Model And Metaprogramming" /><published>2017-09-04T06:39:37+03:00</published><updated>2017-09-04T06:39:37+03:00</updated><id>http://localhost:4000/ruby-object-model</id><content type="html" xml:base="http://localhost:4000/ruby-object-model">&lt;p&gt;First things first: Ruby is a dynamic language but it’s not dynamic in the same way Javascript is a dynamic language. You actually have real classes and class inheritance and not just prototypical inheritance. Also Ruby is truly object oriented — everything is an object, even classes, and there is no such thing as a distinction between value and reference types. In this article we will be looking at MRI (Matz’s Ruby Implementation) which is written in C to see how everything works behind the scenes. At MRI’s core there are two structures that describe the curent list of objects in memory: &lt;em&gt;RObject&lt;/em&gt; and &lt;em&gt;RClass&lt;/em&gt;. The C code is a little bit complicated so I will present a simplified schematic version, which will allow you to understand the implementation.&lt;/p&gt;

&lt;p&gt;At MRI’s core there are two structures that describe the curent list of objects in memory: &lt;em&gt;RObject&lt;/em&gt; and &lt;em&gt;RClass&lt;/em&gt;. The C code is a little bit complicated so I will present a simplified schematic version, which will allow you to understand the implementation. Both structs inherit from another structure called &lt;em&gt;RBasic&lt;/em&gt;. Here’s a simplified version of the internal representation of these objects (again, the real code is a bit more complicated):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ruby-objs.png&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;You might have noticed a few things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Classes are also objects, like previously mentioned.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Each object contains a collection of property values, just like Javascript objects.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Unlike Javascript however, the methods are not implemented on the object level but rather at the class level — an object refers to a class, thus gaining access to the methods.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The RClass struct has a &lt;em&gt;super&lt;/em&gt; field which points to another &lt;em&gt;class instance object&lt;/em&gt; which is the base class of the respective class.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As a side note, because a class is an object you can do something like:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/f88f4c6bced8898f353006d16a4e7c60.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The &lt;em&gt;Class.new&lt;/em&gt; method accepts a block in which we define the class methods.&lt;/p&gt;

&lt;p&gt;As you can see, Ruby’s dynamic nature translates into a very potent meta-programming ability. How much meta-programming you want to do and still have a fairly maintainable application is up for debate (and the subject of another article) however. For the time being, let’s look at how singleton methods / eigenclasses are implemented internally in the MRI.&lt;/p&gt;

&lt;h2 id=&quot;singleton-methods-and-eigenclasses&quot;&gt;Singleton Methods And Eigenclasses&lt;/h2&gt;

&lt;p&gt;You can also do something like:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/dee2afd92c2a3f7fa8809858f9ea174d.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;…which defines a String instance and adds a method &lt;strong&gt;only&lt;/strong&gt; to this instance.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;But hold up, we discussed that we can only define methods on classes and those classes will be inherited by the object.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;«««&amp;lt; HEAD
That’s correct. So what happens here is Ruby creates an &lt;em&gt;eigenclass&lt;/em&gt; specifically for this object (which means “own class” — “eigen” means &lt;em&gt;own&lt;/em&gt; or &lt;em&gt;self&lt;/em&gt; in German). This class in our case is a child class of String. But we can go further — since you can add a method to any object, you can also add methods to class objects which turns out to be the closest thing Ruby has to static methods. 
=======
That’s correct. So what happens here is Ruby creates an &lt;em&gt;eigenclass&lt;/em&gt; specifically for this object (which means “own class” – “eigen” means &lt;em&gt;own&lt;/em&gt; or &lt;em&gt;self&lt;/em&gt; in German). This class in our case is a subclass class of String. But we can go further – since you can add a method to any object, you can also add methods to class objects which turns out to be the closest thing Ruby has to static methods.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;blockquote&gt;
        &lt;blockquote&gt;
          &lt;blockquote&gt;
            &lt;blockquote&gt;
              &lt;p&gt;161c8c4eb8ec2f0f272adce41916041dd9b0c06c&lt;/p&gt;
            &lt;/blockquote&gt;
          &lt;/blockquote&gt;
        &lt;/blockquote&gt;
      &lt;/blockquote&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/ccbb0a2f5b1da6f580c38459f1203f27.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Let’s look at the following class definition:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/e784cd304b404c14916a64a851c1a7ab.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;And last but not least, you can also add methods to a class like this:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/dede663e10f66dea16e67739ed73d38a.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;As you can see, Ruby is quite unique in that it’s dynamic, but it’s still class based (as opposed to objects being just property bags like in Javascript) and it’s quite peculiar in the way it’s implemented. And all these dynamic features makes it easy for us to do…&lt;/p&gt;

&lt;h2 id=&quot;metaprogramming&quot;&gt;Metaprogramming&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Metaprogramming&lt;/em&gt; is a rather loosely defined term, but the core concept is that the program is able to modify itself or generate new code on the fly. A very simple example of metaprogramming is defining accessors for properties in a class.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/668c759648ac89371bb173e5eb0d3708.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;You don’t see that very often in practice however, what you do see is:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/f72919ec8880ce84feded448e3f38360.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;em&gt;attr_accessor&lt;/em&gt; is a method defined of the &lt;em&gt;Object&lt;/em&gt; class from which all Ruby classes inherit. It looks something like this:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/aadbf0fcc2ad54841d5d84e7dff23eeb.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;If you are coming from C++, you might see the benefit in this particular example but might be scraching your head and wondering why is this desirable, because after all Ruby could have included a simplfied way of accessing properties directly in its syntax. Well, the answer is Ruby prides itself on being a very expressive language and being conducing to developer happiness and what metaprogramming allows is a lot of functionality to be added on the fly depending on the state of specific objects. This reflects in the userfriendliness of the libraries people write and one example of this would be ActiveRecord where a lot of functionality is generated on the fly.&lt;/p&gt;

&lt;p&gt;Here’s an example straight from the AR docs. For the following table:&lt;/p&gt;

&lt;pre&gt;
CREATE TABLE products (
   id int(11) NOT NULL auto_increment,
   name varchar(255),
   PRIMARY KEY  (id)
);
&lt;/pre&gt;

&lt;p&gt;you can very easily access it like so:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/39614ab27c80ff5bdb3f8f9c335ec7d6.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;It’s definitely a lot less verbose than if you would have writen something similar in Java/C#, because the library takes care of a lot of magic for us. Ruby might seem like the perfect programming language but all this dynamism commes at a significat performance cost: Ruby (at least when using MRI) is two orders of magnitude slower than Node or Go.&lt;/p&gt;</content><author><name></name></author><summary type="html">First things first: Ruby is a dynamic language but it’s not dynamic in the same way Javascript is a dynamic language. You actually have real classes and class inheritance and not just prototypical inheritance. Also Ruby is truly object oriented — everything is an object, even classes, and there is no such thing as a distinction between value and reference types. In this article we will be looking at MRI (Matz’s Ruby Implementation) which is written in C to see how everything works behind the scenes. At MRI’s core there are two structures that describe the curent list of objects in memory: RObject and RClass. The C code is a little bit complicated so I will present a simplified schematic version, which will allow you to understand the implementation.</summary></entry><entry><title type="html">Simple Component Based Architecture With React</title><link href="http://localhost:4000/component-architecture" rel="alternate" type="text/html" title="Simple Component Based Architecture With React" /><published>2017-08-22T06:39:37+03:00</published><updated>2017-08-22T06:39:37+03:00</updated><id>http://localhost:4000/component-architecture</id><content type="html" xml:base="http://localhost:4000/component-architecture">&lt;p&gt;I normally wouldn’t have wrote this article as I find what I am about to present quite straightforward, but I’ve heard this sentence (or something along those lines) multiple times: &lt;em&gt;Let’s not use React because it would be an overkill for our application. We would have to use Flux / Redux and it’s too much for what we need.&lt;/em&gt; No, you don’t,  and this is important: React is just a view layer. Flux is an architectural pattern, but it doesn’t mean you have to use it if you are using React and you can also use Flux even if you are using another library — in fact it’s quite popular to use Flux with Angular. React (just like Angular 2+) is built around components, and building a web application out of components is perfectly feasible, as I will show.&lt;/p&gt;

&lt;p&gt;Our goal for this demo app is to avoid using a separate store to keep the application architecture simple, but at the same time we want to avoid things like partial page updates or a lot of stateful event based interactions which lead to spaghetti like dependencies in our code. Here’s an example of interaction I’ve unfortunately encountered all too often in UI code:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The user changes a text input field which triggers a handler. That handler does some processing and does some partial updates in some other part of the UI which in turn triggers another set of events, which trigger more processing and more UI updating etc.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/big-ball.png&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can quickly see that this kind of approach becomes unwieldy quite fast, so we are going to do two things to mitigate this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;We will keep the whole application state as the state of the top level &lt;em&gt;App&lt;/em&gt; component.&lt;/li&gt;
  &lt;li&gt;We are going to use a &lt;em&gt;top-down&lt;/em&gt; approach, were the top level component acts as a sort of manager and coordinates what’s happening.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Because components naturally form a hierarchy, we can use that hierarchy to act like sort of a &lt;em&gt;chain of command&lt;/em&gt;. What we are trying to avoid here is components talking &lt;em&gt;directly to one another&lt;/em&gt;, because that would mean NxN complexity and partial page updates. What they should do instead is they should communicate through their superior — that would mean receiving commands (like display this data) and sending notifications up the hierarchy (action X has been performed by the user like submitting a form, for example).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/dilbert.jpg&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So no component should tell other component (on the same hierarchical level) it’s a piece of garbage &lt;em&gt;directly&lt;/em&gt;. But it’s OK if a component “higher in command” does it.&lt;/p&gt;

&lt;h2 id=&quot;the-application&quot;&gt;The Application&lt;/h2&gt;

&lt;p&gt;We are going to build an application that allows a user to manage a list of todos. For the sake of simplicity, we are going to have a backend that globally manages a collection of tasks, so we don’t support multiple users. The application is meant to be run locally and we will demonstrate how to structure it with components. Here’s a sketch of what we want our application to look like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/sketch.png&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The dotted lines indicate how we want to split our application into smaller pieces — the components that are going to make up the application. This means we get this hierarchy:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/hierarchy.png&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
Codewise, this is what the top level component looks like:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/f16af2f7d587cd628e45543b34c0b446.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;As you can see, it contains the methods for adding and removing todos. These are passed down as props to the &lt;em&gt;AddTask&lt;/em&gt; and &lt;em&gt;TaskList&lt;/em&gt; components respectively.&lt;/p&gt;

&lt;p&gt;Here is the &lt;em&gt;AddTask&lt;/em&gt; component:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/acf3aa438d747ff6fde2250ba976a897.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; You might have been worried about sending all that information up the chain of command. Turns out that we don’t need to notify the &lt;em&gt;App&lt;/em&gt; component for every keystroke that changes the input field, no need to bother the boss with irrelevant information every half a second or so. That’s why this component is going to have &lt;em&gt;some private state&lt;/em&gt; of its own. Since we have to track the value of the input field component and we will be reacting on the &lt;em&gt;onChanged&lt;/em&gt; event of the input in order to keep the state and the input value in sync. We also won’t be able to use a functional (stateless) component here because of this.&lt;/p&gt;

&lt;p&gt;And last but not least, the list of tasks:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/70e6cbc872f55cf9cfe3fdf546fb1178.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;and…&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/6ab7f1bbf8faa03609b7df11332a83be.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;It is desirable to use functional components whenever possible. Not only are they easier to write and the code is more succinct, but the fact that don’t handle their own state is also advantageous. The &lt;em&gt;TaskList&lt;/em&gt; component just passes the &lt;em&gt;deleteTaskClick&lt;/em&gt; handler through to the &lt;em&gt;Task&lt;/em&gt; component. We are using a similar bind approach here, as we did for &lt;em&gt;AddTask&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The code was slightly tweaked and simplified for legibility, download the full version &lt;a href=&quot;https://github.com/toaderflorin/florintoader&quot;&gt;here&lt;/a&gt;. And of course, this is a very simple application — if you are using a component based approach, you will probably have multiple “levels of command” in the component hierarchy, similar to what you would have in a big organization. You need to use your judgement in designing the application state, splitting it into components, assigning responsibilities to each and splitting the state accordingly. You might however reach the conclusion that it’s worth using Redux / Flux as the application gets larger.&lt;/p&gt;</content><author><name></name></author><summary type="html">I normally wouldn’t have wrote this article as I find what I am about to present quite straightforward, but I’ve heard this sentence (or something along those lines) multiple times: Let’s not use React because it would be an overkill for our application. We would have to use Flux / Redux and it’s too much for what we need. No, you don’t, and this is important: React is just a view layer. Flux is an architectural pattern, but it doesn’t mean you have to use it if you are using React and you can also use Flux even if you are using another library — in fact it’s quite popular to use Flux with Angular. React (just like Angular 2+) is built around components, and building a web application out of components is perfectly feasible, as I will show.</summary></entry><entry><title type="html">The Redux Async Flow And Handling Side Effects</title><link href="http://localhost:4000/redux-async-flow" rel="alternate" type="text/html" title="The Redux Async Flow And Handling Side Effects" /><published>2017-07-20T06:39:37+03:00</published><updated>2017-07-20T06:39:37+03:00</updated><id>http://localhost:4000/redux-async-flow</id><content type="html" xml:base="http://localhost:4000/redux-async-flow">&lt;p&gt;The first thing that needs to be mentioned is that Redux, while &lt;em&gt;fluxish&lt;/em&gt; in nature, is not an exact canonical implementation of the Flux architecture. Instead of using a dispatcher that sends actions to multiple stores, it uses &lt;strong&gt;a single store&lt;/strong&gt; which keeps the state for the whole application, and a concept known as a &lt;em&gt;reducer&lt;/em&gt; which is essentially a function that gets the current state and an action, and produces a new state based on the action.&lt;/p&gt;

&lt;p&gt;It looks something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/redux.png&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Redux is heavily inspired by Elm, which is a functional programming language, and it takes quite a few cues from it — the application 
state reducer (in a real application, we are actually chaining multiple reducers into a big one, because otherwise the whole thing would become
unwieldy very fast), needs to be a &lt;em&gt;pure&lt;/em&gt; function - which means it’s not allowed to have &lt;em&gt;side-effects&lt;/em&gt;. An action is just a plain object - the only requirement is that this object has to have a &lt;em&gt;type&lt;/em&gt; property. An action creator is just a plain JS function that returns an action object. It looks something like this:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/dbd3ad78285ecd7decfec8cd88877eb3.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;And a reducer would look something like this:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/7c5ad3feedd8d6047cf29fb27efa9782.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;This is the Redux &lt;em&gt;synchronous flow&lt;/em&gt;. Obviously, real world applications are more complicated than that because the client needs to sync with 
the server, which means there are side-effects, but before we look at the async flow, let’s get into…&lt;/p&gt;

&lt;h2 id=&quot;a-bit-of-functional-programming&quot;&gt;A Bit Of Functional Programming&lt;/h2&gt;

&lt;p&gt;Let’s explore the concepts of pure / unpure functions and side-effects by looking at some code:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/867f25d45b36c65b8b409e3eca851091.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;If you worked with the standard Flux implementation by Facebook, you might have come across the concept of &lt;em&gt;action creators&lt;/em&gt;. They are just normal JavaScript functions that return an action, which can be any type of JS object in Redux, the only requirement is to have a &lt;em&gt;type&lt;/em&gt; property of type string. The first function is &lt;em&gt;pure&lt;/em&gt; because it’s return result is &lt;strong&gt;always&lt;/strong&gt; reproducible for the same input parameter, which is not the case for the second function.&lt;/p&gt;

&lt;p&gt;Now have a look at the following function:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/96c280e5330d84851f103710ed381524.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;This function is said to have side-effects, because it changes a global variable which then changes the return value on subsequent
calls. Obviously, functions that have side-effects are not pure.&lt;/p&gt;

&lt;p&gt;We went over the basic Flux architecture and some simple functional concepts. However in the real world, web applications are rarely this simple. 
This initial architecture diagram is missing an essential aspect: server-side access. Obviously, this introduces side-effects, so as a result, the reducers 
won’t be pure anymore.&lt;/p&gt;

&lt;h2 id=&quot;enter-redux-thunk&quot;&gt;Enter Redux Thunk&lt;/h2&gt;

&lt;p&gt;Since Redux allows for custom middleware, we can use something called &lt;em&gt;Redux Thunk&lt;/em&gt; to help us. It is important to be aware that without
middleware, Redux only supports a synchronous flow. So what is a &lt;em&gt;thunk&lt;/em&gt;? It’s just a function - it wraps an expression, so you can delay 
the evaluation of the result of that expression. Here’s a code sample straight from the library documentation:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/7961dfce75a8d1748b4192e3d16ed611.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;How does this help us you might ask?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you pass an expression as a parameter to another function, it will get evaluated within the same JavaScript event tick. If you pass a &lt;strong&gt;thunk&lt;/strong&gt; 
however, that function can evaluate it whenever it wants. This means you can do &lt;strong&gt;async&lt;/strong&gt; stuff easily.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;And this is important because modern web applications are mostly asynchronous in their nature - you usually build a rich responsive client which communicates with an API. This means when the user presses a button, or does something that needs fetching data, you usually show spinners and such. The standard way to handle this is using the Redux &lt;em&gt;Thunk middleware&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This is how you set it up:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/b4754731b7a7ed4967cc7fcbb0fb3d9e.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;So instead of dispatching normal action objects, we will be dispatching &lt;em&gt;async actions&lt;/em&gt;, or thunks. This means we have have to change our action creators to return functions instead of plain objects. Let us make a request to the server, and see how that would work. Obviously, that is an asynchronous action because it takes some time, and we might also want to show some sort of indication to the user that the request is ongoing - something like a spinner. And now let’s add the asynchronous action.&lt;/p&gt;

&lt;p&gt;We are using &lt;strong&gt;axios&lt;/strong&gt;, a popular framework for making http requests.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/4519a92c396ee2bb912bece07983a2cc.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The reducer is going to receive the sync actions dispatched and will take appropriate steps to reduce the application step. The async actions are the place where we are handling the “dirty” stuff, like making an http request.&lt;/p&gt;

&lt;p&gt;For the sake of simplicity, I chose to dispatch the actions inline, but we could (and should) extract them in a different action creator method. I also used the same action called &lt;em&gt;GET_ITEMS&lt;/em&gt;, but you could use different actions for indicating the start, end and a potential error occurence in the occurrence eration.&lt;/p&gt;</content><author><name></name></author><summary type="html">The first thing that needs to be mentioned is that Redux, while fluxish in nature, is not an exact canonical implementation of the Flux architecture. Instead of using a dispatcher that sends actions to multiple stores, it uses a single store which keeps the state for the whole application, and a concept known as a reducer which is essentially a function that gets the current state and an action, and produces a new state based on the action.</summary></entry><entry><title type="html">Relational Database Isolation Levels Explained</title><link href="http://localhost:4000/isolation-levels" rel="alternate" type="text/html" title="Relational Database Isolation Levels Explained" /><published>2017-07-02T06:39:37+03:00</published><updated>2017-07-02T06:39:37+03:00</updated><id>http://localhost:4000/isolation-levels</id><content type="html" xml:base="http://localhost:4000/isolation-levels">&lt;p&gt;This seems to be a murky concept for a lot of developers, so I thought I
would give a simple explanation. The concept of isolation is related to what happens when two or more transactions attempt to access (read and write) the same data at the same time.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/levels.png&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The SQL standard defines four isolation levels:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Read uncommitted&lt;/li&gt;
  &lt;li&gt;Read committed&lt;/li&gt;
  &lt;li&gt;Repeatable reads&lt;/li&gt;
  &lt;li&gt;Serializable&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Most developers can explain the difference between Read committed and Serializable — between no locking at all and full locking. To understand the intermediary isolation levels, one needs to understand the difference between &lt;em&gt;dirty reads, non repeatable reads, and phantom reads&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Let’s try to explain them one by one.&lt;/p&gt;

&lt;h2 id=&quot;dirty-reads&quot;&gt;Dirty Reads&lt;/h2&gt;

&lt;p&gt;A dirty read is the simplest form of a problem that can occur. It means that a transaction can read the changes of another transaction, before that transaction has committed those changes. If a transaction is doing some calculations on a data row (say, part of a stored procedure), and stores the intermediary values of the calculation in the database, the other transactions will see this intermediary data.&lt;/p&gt;

&lt;p&gt;This is the &lt;strong&gt;read uncommitted&lt;/strong&gt; isolation level.&lt;/p&gt;

&lt;h2 id=&quot;non-repeatable-reads&quot;&gt;Non Repeatable Reads&lt;/h2&gt;

&lt;p&gt;A non repeatable read offers a bit more protection. Other transactions only see data once it is committed. There is however the problem that while a transaction is running, another transaction might have changed and committed the value for a certain row in the meantime. If a row is accessed multiple times during to course of a transaction, that transaction might see different values for the same row.&lt;/p&gt;

&lt;p&gt;This is the &lt;strong&gt;read committed&lt;/strong&gt; isolation level.&lt;/p&gt;

&lt;p&gt;The repeatable reads isolation level solves the previous problem. In this case, when a transaction reads a row, it also locks it so that no other transaction will be able to modify it until the current transaction is finished. This way it avoids the case where the value can be changed, but it also introduces more contention in the database because transactions now have to wait more after one another.&lt;/p&gt;

&lt;h2 id=&quot;phantom-reads&quot;&gt;Phantom Reads&lt;/h2&gt;

&lt;p&gt;Then there is the problem of phantom reads. So far, all the locking was done on the row level, to prevent issues with updates on data items. But let’s consider another scenario: a transaction doesn’t change existing items in a table, but instead inserts new items. Other long running transactions might query this table multiple times during their execution and get different collections.&lt;/p&gt;

&lt;p&gt;The serializable isolation solves this problem in a similar way to the previous isolation level. When reading data, it also places a lock on it — the difference is that instead of placing data on a row, it places a lock on a range.&lt;/p&gt;

&lt;p&gt;This range is based on the query - for example:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/181e34df07fcb647671e9512c3e276bf.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Obviously, this introduces even more contention.&lt;/p&gt;</content><author><name></name></author><summary type="html">This seems to be a murky concept for a lot of developers, so I thought I would give a simple explanation. The concept of isolation is related to what happens when two or more transactions attempt to access (read and write) the same data at the same time.</summary></entry><entry><title type="html">Under The Hood: V8 Internals</title><link href="http://localhost:4000/v8-internals" rel="alternate" type="text/html" title="Under The Hood: V8 Internals" /><published>2017-06-16T06:39:37+03:00</published><updated>2017-06-16T06:39:37+03:00</updated><id>http://localhost:4000/v8-internals</id><content type="html" xml:base="http://localhost:4000/v8-internals">&lt;p&gt;&lt;img src=&quot;/images/chrome.png&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive img-left&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Dynamic languages get a lot of love in the startup community, and it’s not hard to see why — they are mostly open source, they are cross platform, and it’s very easy get an application up and running because their syntax tends to be very terse, and you can write a lot of functionality with very little code. But as a wise man used to say, with great power comes great responsibility, and as great as Ruby on Rails is, it’s no secret that Ruby is not exactly fast — depending on the benchmark you’re using, it’s about two orders of magnitude (that’s 100 times) slower than something like Java. Of course as a whole, RoR applications are not that slow because a lot of execution time is spent in native extensions such as querying the database — Ruby and Rails only serve the purpose of gluing stuff together. Nevertheless, more and more companies are moving from Rails to node.js or Go, and they are doing it for performance reasons / scalability. Another reason to use node.js is the fact that you can share code between the server-side and the client-side, but I digress.&lt;/p&gt;

&lt;p&gt;For those who have not used node.js, it uses Google’s V8 JavaScript engine which powers Chrome, and it’s fast. And the reason why it’s fast is because it actually compiles you JS code instead of interpreting it. The whole process works as follows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;V8 evaluates the JavaScript in your file and does just-in-time compilation to machine code using a compiler that’s designed to compile as fast as possible, and then stores the compiled code for that portion of the program.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;V8 also maintains a hot-map of the code that runs. If it sees functions being run several times, it will use a second compiler which optimizes your code, but it’s slower.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The engine also relies heavily on making assumptions about your code, and optimizing preemptively.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;What’s interesting is that V8 doesn’t treat objects as hash-tables, as most JS engines do — it instead creates a sort of struct with the properties of the object, which it calls a hidden class. You can think of this hidden class as similar to Ruby’s eigenclasses.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/6dafc797abe6a17bb7d63d8d94e22fb5.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;If you add a new property to obj1, V8 is no longer able map the properties of the object to the same hidden class, so it will create a new one. V8 also tries to preemptively optimize your code and it does so by looking for repetitions.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;JavaScript is a dynamic language but the more you are using it as a statically typed language, the better of you are when it comes to optimizations.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you are using ES6 (and I recommend that you do because there are great transpilation / bundling tools such as Babel and webpack, not to mention the current version of node.js 7.10 has native support for classes, lambdas, await/async and a lot of other nifty stuff) — I suggest you use classes to structure your project, and use getters and setters.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/eb5fb6e45dd943a3f6ad87da7f1fe827.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Of course, there’s nothing preventing you from modifying the “private” fields in JavaScript (except maybe a code review from your technical lead), and also there is nothing preventing you from adding new properties to the object (except using Object.freeze() but this has a performance penalty). Not only will this give you better encapsulation, but it will speed up your code because V8 is able to optimize it better. Of course, if you really want to have private members and proper static (compile time) type checking, you can use Facebook’s Flow, or Microsoft’s TypeScript.&lt;/p&gt;

&lt;p&gt;Also, a lot of developers tend to use plain JS objects as dictionaries because objects are key-value pairs. However, knowing how the V8 compiler optimizer works, that’s not a very good idea. Computed property names are also problematic for the optimizer, and they make code also hard to understand, so they should be avoided. The Map object is great, if you need to use key-value pairs.&lt;/p&gt;

&lt;p&gt;Another word of caution: be extra careful with arrays. Check out the following code:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/2b22591a73bd61ad4b07dec88fdae5b7.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;As long as an array doesn’t have holes in it, it’s going to be treated as a contiguous memory area, which makes the code using it fast. However, if you get fancy like in the example above, you are going to have a sparse array, and V8 will convert it to a hash-table, which will make writing and reading slower.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;tldr;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The closer your JavaScript program is to static typed code, the better V8 is going to be able to optimize your code using static analysis. You can use TypeScript / Facebook Flow to enforce this.&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Architectural Ramblings: Cohesion And Coupling</title><link href="http://localhost:4000/cohesion-and-coupling" rel="alternate" type="text/html" title="Architectural Ramblings: Cohesion And Coupling" /><published>2017-06-14T06:39:37+03:00</published><updated>2017-06-14T06:39:37+03:00</updated><id>http://localhost:4000/cohesion-and-coupling</id><content type="html" xml:base="http://localhost:4000/cohesion-and-coupling">&lt;p&gt;When you are writing code, you are usually not working alone. That means working with other people’s code, so they need to understand your code and you need to understand theirs. Good code is something that you can understand by reading, not by debugging it (because debugging is an order of magnitude more time consuming. That means a few conditions need to be met.&lt;/p&gt;

&lt;p&gt;Probably the most important thing is knowing where to find things in the codebase.&lt;/p&gt;

&lt;h2 id=&quot;what-is-cohesion&quot;&gt;What Is Cohesion?&lt;/h2&gt;

&lt;p&gt;In software engineering, cohesion refers to how much items in a class are logically related to one another. An example of this would be having all your summer shirts neatly folded into one drawer, the casual t-shirts in another etc. How does it help? It’s obvious: when you are looking for something, you know exactly where to find it, so you don’t waste time with trial and error.&lt;/p&gt;

&lt;p&gt;Just try to find your favourite shirt in here:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/closet.jpeg&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;An architecture in which components have a high level of cohesion makes development fast, because developers don’t spend a lot of time searching through thousand of lines code, talking to one another, sending emails around and waiting etc. It’s just smooth. Now obviously nobody wants their closet to look like the previous picture, and nobody does it intentionally. Also I am 100% sure that the owner of this baby is well aware that this is not the tidiest closet on planet Earth. My experience is that when this happens in software development, the developers fully realize it (because devs are a pretty smart bunch of people), but there isn’t a lot they can do about it — it’s usually a by product of various outside pressures.&lt;/p&gt;

&lt;h2 id=&quot;what-is-coupling&quot;&gt;What Is Coupling?&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/rubik.png&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive, img-left&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ever tried solving a Rubik cube? What most people do is try to solve one or two faces, and then the rest. Problem is: after solving the first face, trying to do the next will mess up what you’ve already done. Actually, that’s not how you solve a Rubik cube, but that’s another story.&lt;/p&gt;

&lt;p&gt;The problem with the Rubik cube is that the faces are interdependent, and this kind of dependencies between faces (or components) is something that you want to avoid at all costs in software engineering. Imagine a team of 6 people (developers), who are trying to solve this puzzle. Each person does a move at a time, while the rest think. The first individual is trying to do the red face, the second is trying to do the blue face etc. Because the project is a bit behind schedule, six guys were brought in to make things go faster, instead of one. Probably, those guys are more likely to get on each other’s nerves than do anything particularly useful, because:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;They have different goals (each guy is trying to do his own user story, or face), and is evaluated as such by upper management.&lt;/li&gt;
  &lt;li&gt;They are not isolated from one another and are stepping on each other’s toes.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Consider the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Component A depends on component B (it has a direct reference to component B of some sort).&lt;/li&gt;
  &lt;li&gt;Component B has a dependence on component C.&lt;/li&gt;
  &lt;li&gt;And component C has a dependence on component A.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;What happens if you do some changes on A? Well, now the public signature of A is different and C will probably not work any more with A. So we need to change C. But B depends on C, so we also need to change B. So we just changed B, but remember that A was dependent on B. Is A now still compatible with the changes we made to B? We might need to change A again. But wait! If we change A again, will it still work with C? We have a chain of dependencies, and also a circular reference. If we don’t manage to fit the pieces together, we might have to throw the whole system away and start from scratch.&lt;/p&gt;

&lt;p&gt;This might sound like a contrived example, but it’s not. I encountered it quite a bit in client side applications and in systems based on events that maintain and manipulate state. One button click would trigger some computation and then partial update of just some sections of the UI, including setting values on various controls. Change event handlers on these controls (text-box or other input elements) would trigger additional computations and partial updates in other parts of the UI and would also set public state flags used by other events that update other parts of the UI etc. Sometimes the partial updates would overlap and cause circular dependencies, or a very complicated flow that is hard to follow / change. SPAs not using an MVC, MVVM or a Flux pattern are even more problematic because many times they involve unobtrusive attachment of event handlers, and auto-magic JS is notoriously hard to debug when it’s not working properly.&lt;/p&gt;

&lt;p&gt;The problem is in the real world these structures usually evolve unplanned and organically (like a tree’s branches growing in all directions). One developer has to solve a bug that states some value in a UI element is incorrect so does a quick-and-dirty fix by attaching to some event and updates that control. Another one later comes and does another quick fix by doing the same someplace else etc.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;But things depend on one another, don’t they?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Yes, they do. You will always have coupling, but you can have loose-coupling or tight-coupling. And while sometimes a bit of tight coupling is inevitable, one thing you want to avoid at all costs is circular references. If component A depends on B, and B depends on A, if you want to do changes, you need to change both at the same time. An example of this is the following: your UI will always have references to your business layer, but you should never reference the UI from the business — you just created a bidirectional monolithic bloc.&lt;/p&gt;

&lt;h2 id=&quot;flux-as-a-real-world-example&quot;&gt;Flux As A Real World Example&lt;/h2&gt;

&lt;p&gt;All this stuff might seem a bit theoretical, so I thought I would use Flux as an example on how you can mitigate these problems.&lt;/p&gt;

&lt;p&gt;Here’s a high level overview of the architecture:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flux.png&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Explaining the concepts of Flux is beyond the scope of this article, but one key thing to take away from this architecture, is that the information flow is &lt;strong&gt;unidirectional&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Which leads us to…&lt;/p&gt;

&lt;h2 id=&quot;agnosticism&quot;&gt;Agnosticism&lt;/h2&gt;

&lt;p&gt;The general rule of thumb is that the components that are more prone to change, should depend on core components which are stable, and the stable ones should be agnostic of the other ones. The core components and interfaces (logging, routing, database access etc.) form the backbone of the application (the foundation, if you will) and the backbone should be closely guarded by the architect or the lead developer. The reason why you want to have this dependency topology (and not vice-versa), is because you don’t want a small change by John The-New-Guy in the model of the /socks-and-ties page of your online store application, to bring down everything. Also remember, that you should really give a good thought to the foundation, because after you’ve build level one and two of your structure, it’s really damn hard to make changes to the foundation because the whole thing rests on top of it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/motherboard.png&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive, img-left&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Imagine a computer. It has a motherboard, a processor, video card, memory, a hard-drive etc. The processor is a nicely encapsulated box, which communicates with the other nicely encapsulated boxes through well defined interfaces (the slot it’s fitted in, the other slots of the components in the mother board — all of these are industry standards). Regardless who makes the motherboard (MSI, Asus), the interfaces are the same for a specific hardware architecture. So let’s say, I get pissed at my video card for being so slow. Or with the hard drive, because I want an SSD. All I have to do is swap it with another one, just that simple. This is what loose coupling is. Now imagine if the CPU had wires directly to the video-card, memory or hard-drive. If you’d wanted to change something, you’d have to trow the whole computer away and buy another one. Also, a keep in mind that a CPU has more than a billion transistors, but it’s socket has only hundreds of pins. Now, that’s encapsulation! The more state you can keep private in a class, the better, because over time there will be other code that links to it, which means tight coupling.&lt;/p&gt;

&lt;p&gt;So the next time you want to call a component from another component directly, it might be worth it to consider an abstraction layer. Lastly, there is such a thing as the law of diminishing returns. It’s really easy to over-engineer stuff in the name of code art.&lt;/p&gt;</content><author><name></name></author><summary type="html">When you are writing code, you are usually not working alone. That means working with other people’s code, so they need to understand your code and you need to understand theirs. Good code is something that you can understand by reading, not by debugging it (because debugging is an order of magnitude more time consuming. That means a few conditions need to be met.</summary></entry></feed>