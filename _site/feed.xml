<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-01-26T15:09:54+02:00</updated><id>http://localhost:4000/</id><title type="html">achiral</title><subtitle>achiral offers consulting and custom software development services on the node.js and .NET stacks.
</subtitle><entry><title type="html">Strategies For Scaling Out Relational Databases</title><link href="http://localhost:4000/scaling-sql" rel="alternate" type="text/html" title="Strategies For Scaling Out Relational Databases" /><published>2020-01-12T08:39:37+02:00</published><updated>2020-01-12T08:39:37+02:00</updated><id>http://localhost:4000/scaling-sql</id><content type="html" xml:base="http://localhost:4000/scaling-sql">&lt;p&gt;First of all, needing to scale out your database is a great problem to have because if your company have gotten to this point it’s definitely doing something right. At some point there’s really no way to scale up by increasing CPU power, memory and disk space you are forced to scale out meaning you need more machines to handle the database load. Of course, once you’ve moved various portions of your database to different machines, you get into several complications. To simplify things you can split them into two categories:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Distributed queries&lt;/li&gt;
  &lt;li&gt;Distributed transactions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;SQL Server supports both out of the box provided you use a vertical scale out model, meaning you have some tables on one server and other tables on other servers. It does not support any of those for horizontal scale out or sharding. Another aspect worth mentioning is that when you are doing sharding, it means you have a bunch of servers which all have the same schema, but the tables on each server have only a subset of the data. While horizontal scale out provides a temporary solution, on the long term all rapidly growing applications will need to make use of horizontal scaleout.&lt;/p&gt;

&lt;h2 id=&quot;strategies&quot;&gt;Strategies&lt;/h2&gt;
&lt;p&gt;So since all of them have the same data schema we need a strategy – usually that involves a &lt;em&gt;shard key&lt;/em&gt;. Probably the most ubiquitous way to implement sharding is to use a tenant key – one of the simplest sharding strategies is to have one database per user and in a lot of b2b applications use that approach. That’s however not really tenable if you have hundreds of thousands of users because it would mean one VM per user.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Range&lt;/strong&gt;&lt;br /&gt;
Sharding by range is probably the most simple way to implement sharding and it means that each node in our cluster holds data associated with. The problem with that approach is that it really doesn’t split data evenly.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Consistent hashing&lt;/strong&gt;&lt;br /&gt;
An approach that was developed to solve the problems associated with sharding by range is to use some form of hash as the key and there are several approaches to ensuring this repartion is uniform, hence the name &lt;em&gt;consistent&lt;/em&gt;. For readers interested in how it works under the hood, here’s a comprehensive &lt;a href=&quot;&quot;&gt;resource&lt;/a&gt; describing the exact implementation. The problem with consistent caching is that while it does ensure you don’t have hotspots – the data might be spread evenly but &lt;em&gt;utliisation&lt;/em&gt; (or reads) of that data isn’t. Consistent hashing also makes the rebalancing shards quite difficult.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Using a map&lt;/strong&gt;&lt;br /&gt;
Another approach is to map individual keys to nodes in the cluster.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/scaling-sql/shards.png&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s imagine we’re building a social media application where users can create posts and comment on other users’ posts. The most natural strategy for splitting our data would be to do it by how that data is related to a user. We would have the following database diagram.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/scaling-sql/diagram1.png&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can immediately see that we have a small predicament: a comment is tied to both a post of a certain user AND to the user making the comment. So how would we go about partitioning? While we can store the comments in each user’s shard, that’s a really bad way to do it because if we want to display a post we would need to query a lot of shards to render that feed. So it’s much better to tie the comment to the post it’s being made.&lt;/p&gt;

&lt;p&gt;So what happens if we want to create something like a “history” page, a central log of the user’s actions which contains all the comments a user made? We could of course query all the shards and get that info but if you’re a company like Facebook that’s not really feasible. An alternative is to duplicate information in something like a History table, so every time a user posts a comment, we also add an entry there.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/scaling-sql/diagram1.png&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Almost always, using sharding means we need to denormalize our data structure so we would have some duplication. Another example of duplication is the fact that our “catalog” or reference tables need to be duplicated across all shards. Here’s an example – when the user creates an account he or she could select a home country and we would like to enforce referential integrity via an FK constraint to a table containing a list of countries. But because this field is mandatory, we would need to have the Countries table replicated across all shards. Obviously updating the supported list of countries means we need to update all the shards, hence the added complexity of having a sharding architecture. Of course non relational databases such as Mongo are much easier to shard, but it’s also much harder to enforce structural integrity with them so quite often you end up with bad data.&lt;/p&gt;

&lt;p&gt;Another thing worth mentioning is there’s usually no escaping  multi-shard queries. Here’s a typical feed for social media apps. While we can show a user’s timeline by querying just one shard, we can’t really do that for a newsfeed because a user is mostlikely following posts made by users residing on multiple shards.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/scaling-sql/feed.png&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What social media sites do is they using a system called infinte scrolling where as the user scrolls the page down, more content is loaded. Obviously multiple shards are being hit but there are ways of otpimizing it. For example, most users probably follow:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;For an application like Facebook, users mostly tend to follow users in their own country, so we can try combining users with the same country on the some node.&lt;/li&gt;
  &lt;li&gt;An asynchronos job could update a feed table with post ids.&lt;/li&gt;
  &lt;li&gt;Requests across shards can be batched.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Whatever strategy we use, there is always some delay and problems associated with this.&lt;/p&gt;

&lt;p&gt;Using a sharding map we can have more users share the same VM. But what happens if the data for one user is too big for one shard (in our particular case, say he or she posts a lot or gets a lot of comments)? In that case our sharding key would be a combination of the &lt;em&gt;user-id&lt;/em&gt; and the &lt;em&gt;post-id&lt;/em&gt;. Regardless of how you’re structuring your data, there’s probably no escaping multi shard queries such as when you want to build a feed of the content your people you are following. You still want to limit the number of queries as much as possible, create a list of shards for the people a user follows and then send requests in batches to each shard and order them on the client. Taking the user’s location (country) into account when generating the shard key can also be helpful because it’s likely that users from one country will mostly follow users from the same country so that helps with optimization. And of course analytics and reports shouldn’t use live data, they should use some form of data warehouse or data lake.&lt;/p&gt;</content><author><name></name></author><summary type="html">First of all, needing to scale out your database is a great problem to have because if your company have gotten to this point it’s definitely doing something right. At some point there’s really no way to scale up by increasing CPU power, memory and disk space you are forced to scale out meaning you need more machines to handle the database load. Of course, once you’ve moved various portions of your database to different machines, you get into several complications. To simplify things you can split them into two categories:</summary></entry><entry><title type="html">Domain Driven Design</title><link href="http://localhost:4000/ddd" rel="alternate" type="text/html" title="Domain Driven Design" /><published>2019-12-12T08:39:37+02:00</published><updated>2019-12-12T08:39:37+02:00</updated><id>http://localhost:4000/ddd</id><content type="html" xml:base="http://localhost:4000/ddd">&lt;p&gt;While the term &lt;em&gt;domain driven design&lt;/em&gt; gets thrown around quite a bit, if you ask five different developers what they understand by DDD, you are most likely going to get five different answers. To make matters worse, even Eric Evan’s book which is the canonical authority on all things DDD doesn’t give an exact definition so the term DDD is used quite loosely. It goes without saying that a thorough understanding of the business should be important for all parties involved in software development (developers, product owners, designers), sometimes there’s a disconnect between the imediate goals of the people involved.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The company as a whole must make a profit so it needs to solve certain business needs for existing and potential new customers.&lt;/li&gt;
  &lt;li&gt;Developers are usually more interested in the technology itself, don’t particularly like meetings and would like to work with the newest stacks available.&lt;/li&gt;
  &lt;li&gt;Designers are highly creative and would like to showcase their skills.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At its core, DDD is a recipe (or codified prescription) for doing software development that attempts to bridge this disconnect. One way to think about DDD is that it is a top-down way of looking at the development process, in the sense that we define and codify the business requirements first and then we build on top of that. The transfer of knowledge between the business owner and developers usually happens during an &lt;em&gt;event storming&lt;/em&gt; session.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/storming.jpg&quot; alt=&quot;event-storming&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The brainchild of Alberto Brandolini, it’s essentially a way for the team members to communicate ideas using sticky notes and a whiteboard. Event storming is intended to create and share a common understanding of the domain model. It’s not a replacement for a design document, flow chart, UML diagram, deployment plan, architecture diagram, or anything else related to implementation. The first step is to find the domain events and write them on orange sticky notes. When all domain events are found the second step is to find for each domain event the command that caused it. Commands are written on blue notes and placed directly before the corresponding domain event. In the third step the aggregates are identified on which the commands are executed and to which happen the domain events. The aggregates are written in yellow stickies.&lt;/p&gt;

&lt;p&gt;Let us imagine the following scenario – the team is tasked with creating creating a simple e-commerce site that sales sporting apparel. DDD mandates that before we choose what technology we build the application in, whether we choose a microservice approach and before we design the UX and UI, we define the exact business objects and processes. We can identify some domain entities from the start – users need to log in so we’ll have an &lt;em&gt;Account&lt;/em&gt; object and we also need multiple types of users (for example an admin and a regular customer) so we will also have a Permission object. Of course we need to have a catalogue of products what we’re going to sell so we will define a &lt;em&gt;Product&lt;/em&gt; object and these products have to be kept in stock so we’ll have &lt;em&gt;Warehouse&lt;/em&gt; and &lt;em&gt;WarehouseProuct&lt;/em&gt; entries. And of course &lt;em&gt;Order&lt;/em&gt;, &lt;em&gt;OrderItem&lt;/em&gt; and &lt;em&gt;CardInfo&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;We can model it like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/domain-model.png&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When ORMs entered the scene, they put the concept of a model or entity at the forefront. All of a sudden developers didn’t really have to concern themselves with low level database queries, join tables in case of many-to-many relations etc. We could just focus on defining the objects and the levels between them and the library would take care of the rest.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/db3cfb67153fba369a2604e6c21ac0be.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Of course, a domain expert isn’t interested things like databases (SQL vs NoSQL), comunication protocols like REST or gRPC and so forth. Domain experts aren’t interested necesarily in UX either, all these things come afterwards. These things pertain to &lt;em&gt;how&lt;/em&gt; the business goal is achieved not to &lt;em&gt;what&lt;/em&gt; the business goal is.&lt;/p&gt;

&lt;p&gt;What we described goes by the term &lt;a href=&quot;https://en.wikipedia.org/wiki/Model-driven_architecture&quot;&gt;Model Driven Architecture&lt;/a&gt;. Domain Driven Design counts as MDA but not viceversa because  DDD is actually a bit more prescriptive and it introduces additional concepts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Entities&lt;/strong&gt; form the basis of our domain model.&lt;/li&gt;
  &lt;li&gt;A collection of entities that can be treated as an atomic enity form an &lt;strong&gt;aggregate&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Service&lt;/li&gt;
  &lt;li&gt;Entities and their associated services can be grouped into fairly isolated islands called &lt;strong&gt;bounded contexts&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Domain events&lt;/strong&gt; determine the flow of the domain in time.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Bounded context make for good candidates for individual microservices but they don’t have to be. Remember, we are using DDD to inform our technical decisions, not the other way around.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;One of the slightly overlooked benefits of DDD is that it can significantly imporive your architectural robustness your software solution. Virtually all team members of a software development team agree that properly architecting an application is extremely important – because just like a poorly constructed building, a software project lacking a solid architectural background can easily come crashing down after a while. But unlike with buildings, because of software’s fluid development nature there’s always the feeling that one can build functionality poorly initially (say to meet a deadline) and then go back and change things. The problem with this line of thinking is if new functionality is built on top of existing one, this never ends up happening, so constructing a solid foundation is extremely important.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/mvvm.png&quot; alt=&quot;event-storming&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s consider the MVVM architectural pattern. While not applications use this exact pattern, there’s usually some separation between the business logic and the domain model and what’s actually shown on screen – for example if you’re fetching data in a React / Redux application, usually the model will be whatever the API returns and the frontend will keep some transformed version of this data in the local state. So what happens if we don’t enforce this separation between domain models and view models? Developers end up changing the model to suit whatever needs to be shown on the screen, so we end up with a lot of hacks, temporary or computed fields, duplicate objects for the same business entity and a lot of fragmentation and corners cut in the codebase. The model should always be the primary source of truth.&lt;/p&gt;

&lt;p&gt;Ultimately, DDD is just an approach to keep focus on the endgoal of delivering business value while maintaining a clear architecture and separation of concerns.&lt;/p&gt;</content><author><name></name></author><summary type="html">While the term domain driven design gets thrown around quite a bit, if you ask five different developers what they understand by DDD, you are most likely going to get five different answers. To make matters worse, even Eric Evan’s book which is the canonical authority on all things DDD doesn’t give an exact definition so the term DDD is used quite loosely. It goes without saying that a thorough understanding of the business should be important for all parties involved in software development (developers, product owners, designers), sometimes there’s a disconnect between the imediate goals of the people involved.</summary></entry><entry><title type="html">HTML Layout: The Weird Parts</title><link href="http://localhost:4000/weird-html" rel="alternate" type="text/html" title="HTML Layout: The Weird Parts" /><published>2018-09-15T06:39:37+03:00</published><updated>2018-09-15T06:39:37+03:00</updated><id>http://localhost:4000/weird-html</id><content type="html" xml:base="http://localhost:4000/weird-html">&lt;p&gt;If you have worked with another layout engine other than HTML, you probably think that HTML is really hacky and unpredictable. And you wouldn’t be mistaken to think that: sometimes things expand to fill the available spaces, sometimes they don’t. Sometimes you specify a margin and it is respected. Sometimes it’s not. Most developers would feel your pain, but here’s the thing:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;HTML evolved overtime, and sometimes a bit chaotically. It wasn’t thought out from the start in its current form.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Yet as web developers, we need to use it so we still need to understand its quirks. And first and foremost we need to understand the fundamental philosophy of HTML: it designed to describe pages that flow vertically, as opposed to say something like PDF documents which don’t flow AT ALL (they have &lt;strong&gt;fixed layout&lt;/strong&gt;). Mobile applications are also not really designed to flow so a lot of the UI elements like labels and buttons have fixed positions, while desktop applications (both Windows and MacOS) are somewhere in between because you can resize the application window. Keep this in mind: &lt;em&gt;the browser usually assumes you read the content in the webpage from top to bottom and you use the scroll bar to navigate&lt;/em&gt;. The Facebook wall would be a perfect example of this philosophy.&lt;/p&gt;

&lt;p&gt;A byproduct of this assumption is that divs expand to fill the whole available space horizontally but not vertically. As a web developer, you are also expected to take into account the possibility the user might change the zoom factor of the page (to increase font-size), so it’s important that the application is responsive. Not to mention he or she might view the webpage from a mobile device.&lt;/p&gt;

&lt;p&gt;Before we explain the more quirky aspects of HTML, we need to have a basic overview of the box layout of the elements:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/weird-html/css-box-model.png&quot; alt=&quot;css-box-model&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So an element will have&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Some content&lt;/li&gt;
  &lt;li&gt;A border which can have some thickness to it&lt;/li&gt;
  &lt;li&gt;Some padding between the border  and the actual content&lt;/li&gt;
  &lt;li&gt;Margin which indicates the space between the border and the neighboring elements&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Keep in mind that by default the &lt;em&gt;width&lt;/em&gt; and &lt;em&gt;height&lt;/em&gt; CSS properties actually refer to the size of the content and they DON’T include padding and margin size, which is a bit counterintuitive.&lt;/p&gt;

&lt;p&gt;Here’s what you need to do:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/12fcda543d0c76cd57df3890917cfdd8.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The default value is &lt;em&gt;content-box&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;margin-collapse&quot;&gt;Margin Collapse&lt;/h2&gt;
&lt;p&gt;A weird aspect of HTML (if you don’t know about it) is the way margins behave.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/weird-html/collapse.png&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Margin collapsing means that if you have two elements with margins set on them, the space between them will equal the maximum of the two margins, NOT the sum. But this happens &lt;strong&gt;only vertically&lt;/strong&gt;. This again has to do with the vertical flow philosophy of HTML.&lt;/p&gt;

&lt;p&gt;But there’s another catch: margin collapsing doesn’t happen for the first or last element of a &lt;em&gt;block formatting context&lt;/em&gt;. But before we talk about those, let’s talk about…&lt;/p&gt;

&lt;h2 id=&quot;float-and-clear&quot;&gt;Float And Clear&lt;/h2&gt;
&lt;div style=&quot;background-color: #f8f8f8; padding: 15px;&quot;&gt;
  &lt;div style=&quot;display: block; width: 64px; height: 64px; background-color: cyan; float: left; margin-right: 12px;&quot;&gt;&lt;/div&gt;
  &lt;div style=&quot;display: block; width: 64px; height: 64px; background-color: red; float: left; margin-right: 12px;&quot;&gt;&lt;/div&gt;
  &lt;div style=&quot;display: block; width: 64px; height: 64px; background-color: magenta; float: right; margin-left: 12px;&quot;&gt;&lt;/div&gt;
  &lt;div style=&quot;display: block; width: 64px; height: 64px; background-color: yellow; float:left; clear: left; margin-right: 12px; margin-top: 12px&quot;&gt;&lt;/div&gt;
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam ultricies, dolor lacinia varius bibendum, augue ante tempor quam, nec faucibus tortor ligula non nisl. Suspendisse nec odio at orci dignissim ultrices. Morbi ac turpis ac tortor luctus euismod ut eget ante. Curabitur egestas luctus tortor, vitae fermentum est vestibulum id. Fusce imperdiet velit quis ornare hendrerit. Interdum et malesuada fames ac ante ipsum primis in faucibus. Aliquam dapibus massa et magna egestas, sit amet vehicula turpis lacinia. Ut tristique elit purus, et ultricies lorem volutpat vitae. Phasellus pellentesque imperdiet sapien id pretium. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The CSS for these elements actually looks like this:
&lt;script src=&quot;https://gist.github.com/toaderflorin/81854817ad5a2c3262633cc8b5e06717.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Floats are a standard way of incorporating an image (or some sort of container block) into a paragraph of text. Not only can you have multiple images, but you can actually use both &lt;em&gt;float&lt;/em&gt; and &lt;em&gt;clear&lt;/em&gt; at the same time.&lt;/p&gt;

&lt;p&gt;Keep in mind that floating elements don’t have any effect on the size of the container:&lt;/p&gt;

&lt;div style=&quot;background-color: #f8f8f8; padding: 15px;&quot;&gt;
  &lt;div style=&quot;display: block; width: 128px; height: 128px; background-color: salmon; float: left; margin-right: 12px;&quot;&gt;&lt;/div&gt;  
  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam ultricies, dolor lacinia varius bibendum, augue ante tempor quam, nec faucibus tortor ligula non nisl. Suspendisse nec odio at orci dignissim ultrices. Morbi ac turpis ac tortor luctus euismod ut eget ante.
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;This might not actually be the desired outcome, but it turns out there is a workaround.&lt;/p&gt;

&lt;div style=&quot;background-color: #f8f8f8; padding: 15px;&quot;&gt;
  &lt;div style=&quot;display: block; width: 128px; height: 128px; background-color: orange; float: left; margin-right: 12px;&quot;&gt;&lt;/div&gt;  
  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam ultricies, dolor lacinia varius bibendum, augue ante tempor quam, nec faucibus tortor ligula non nisl. Suspendisse nec odio at orci dignissim ultrices. Morbi ac turpis ac tortor luctus euismod ut eget ante.
  &lt;div style=&quot;clear: both;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
What I did was add an empty div at the end of the parent container, like so:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/08ba23d70fdf75540776c69b3bc40ced.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;That’s a bit annoying so what you could do is create a CSS class that always appends an html element that does the clearing (like we previously did). This trick is called a &lt;strong&gt;clearfix&lt;/strong&gt;.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/3605269010a8e7d506cf932afd496917.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Then, all you need to do is simply add that class to all the elements that you want clearfixed.&lt;/p&gt;

&lt;h2 id=&quot;block-formatting-contexts&quot;&gt;Block Formatting Contexts&lt;/h2&gt;
&lt;p&gt;An element generates a block formatting context if it is:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the root element or something that contains it&lt;/li&gt;
  &lt;li&gt;floats (elements where float is not none)&lt;/li&gt;
  &lt;li&gt;absolutely positioned elements (elements where position is absolute or fixed)&lt;/li&gt;
  &lt;li&gt;an inline-block (elements with display: inline-block)&lt;/li&gt;
  &lt;li&gt;a table cell (elements with display: table-cell, which is the default for HTML table cells)&lt;/li&gt;
  &lt;li&gt;a table caption (elements with display: table-caption, which is the default for HTML table captions)&lt;/li&gt;
  &lt;li&gt;a block element where overflow has a value other than visible&lt;/li&gt;
  &lt;li&gt;an element with display: flow-root&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When dealing with blocks, it’s important to know how they affect their children. One such effect is the margin collapsing. Another effect is that block size affects the size of its children. By default, a div will expand to fill its parent container vertically, but there’s a gotcha:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/weird-html/width-auto.png&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This by default makes just the content to be 100%.&lt;/p&gt;

&lt;h2 id=&quot;vertical-centering&quot;&gt;Vertical Centering&lt;/h2&gt;
&lt;p&gt;Something as simple as centering something in the middle of a container was problematic before the addition of flexbox. It still is for older browsers which don’t fully support the &lt;em&gt;display: flex&lt;/em&gt; CSS specification. Before we get into the quirky cases, let’s see how we solve vertical centering with flexbox:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/0ed3a4426693a015ce6327bd30102502.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;If you know the height of the panel you want to center you can do something like:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/49ae5ad134c24a4801965bd9516941c0.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;If your browser doesn’t support &lt;em&gt;calc&lt;/em&gt;, there are other ways to do it such as using line-height (which works only for text) or using &lt;em&gt;display: table-cell&lt;/em&gt;. Obviously, these are a bit hackish.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Yes, HTML behaves quite unexpectedly if you are coming from something like WPF. As long as you are aware of some of the gotchas of the spec and the differences between browser implementations, developing in it is actually quite pleasurable.&lt;/p&gt;</content><author><name></name></author><summary type="html">If you have worked with another layout engine other than HTML, you probably think that HTML is really hacky and unpredictable. And you wouldn’t be mistaken to think that: sometimes things expand to fill the available spaces, sometimes they don’t. Sometimes you specify a margin and it is respected. Sometimes it’s not. Most developers would feel your pain, but here’s the thing:</summary></entry><entry><title type="html">Understanding Web Application Security</title><link href="http://localhost:4000/web-security" rel="alternate" type="text/html" title="Understanding Web Application Security" /><published>2018-07-28T09:39:37+03:00</published><updated>2018-07-28T09:39:37+03:00</updated><id>http://localhost:4000/web-security</id><content type="html" xml:base="http://localhost:4000/web-security">&lt;p&gt;I can testify that a lot of people confided in me they considered doing this (including yours truly) under the frustration of the bi-monthly administrative policies that mandated we change our workstation password:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/security/my-password.jpg&quot; alt=&quot;my-password&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This sort of thing happens more than you would imagine—what a lot of people don’t know is that hackers rely a lot on &lt;em&gt;social engineering&lt;/em&gt; to gain access to systems. &lt;a href=&quot;https://en.wikipedia.org/wiki/Kevin_Mitnick&quot;&gt;Kevin Mitnick&lt;/a&gt; was famous for calling in, pretending to be somebody he wasn’t and asking for somebody’s password in order to “perform some maintenance”.&lt;/p&gt;

&lt;h2 id=&quot;phishing&quot;&gt;Phishing&lt;/h2&gt;
&lt;p&gt;If you’ve followed the US 2016 election cycle news, you might have heard that John Podesta, Hillary Clinton’s campaign manager, was hacked. He was actually the victim of a &lt;em&gt;phishing&lt;/em&gt; scam whereby he received an email made to look like an authentic email from Google (he was using Gmail) that informed him that he needed to change his password because unauthorized access to his account was detected. He fell for it, clicked on the link which redirected him to a page that looked like a Google page (he didn’t pay attention to the URL, it seems), where he entered his old and &lt;em&gt;supposedly&lt;/em&gt; new credentials.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;But this is a scam, it’s not what I wanted to talk about, because you as a developer cannot do anything about it. I actually want to talk about real  vulnerabilities in the software and how they can be addressed, which means understanding the vectors attackers have at their disposal.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There are quite a lot of developers that when it comes to web application security they rely on whatever framework they are using to take care of that for them, but don’t really have an understanding of what’s happening behind the scenes. Web application security is quite a complex topic, we will be covering:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Cross-site scripting, also called XSS&lt;/li&gt;
  &lt;li&gt;Session hijacking&lt;/li&gt;
  &lt;li&gt;Cross-site request forgery, or CSRF&lt;/li&gt;
  &lt;li&gt;SQL injection&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Both XSS and SQL Injection are cases of &lt;em&gt;code injection&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;cross-site-scripting&quot;&gt;Cross-Site Scripting&lt;/h2&gt;
&lt;p&gt;XSS refers to a vulnerability where an attacker is able to “inject” Javascript code that will be run by the application. In my previous article, I’ve discussed the &lt;a href=&quot;http://achiral.io/cors-made-simple&quot;&gt;same-origin&lt;/a&gt; policy concept at length which states that if content from one site is granted permission to access resources on a system, then any content from that site will share these permissions, while content from another site will have to be granted permissions separately.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;A lot of people think that SOP prevents XSS attacks. This is &lt;b&gt;not the case.&lt;/b&gt;&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;A typical example of XSS is &lt;em&gt;persistent cross-site scripting&lt;/em&gt;. If a page isn’t properly &lt;em&gt;sanitizing&lt;/em&gt; the user input (a field in a for, for example), a user could actually type in valid Javascript code, which is going to be saved by the application in its database and be subsequently rendered every time it displays a page. Imagine you have a page that is visible to multiple users (such as a product page) which allows for users to add comments. If the page is not escaping user input, it is possible for a malicious user to write actual an script block, which will then be rendered to all users as part of the page HTML. The Javascript code has access to the cookies of that user and it can send that information to the a attacker.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/security/attack.png&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;An alternative is the &lt;em&gt;reflected&lt;/em&gt; (or non-persistent) XSS attack, whereby the user’s input is not stored in the database, but returned back in the same way it was inputted. It works like this: say you have a page that allows you to search for products. The user types some text in the search box and clicks the search button which sends a GET request to the server.&lt;/p&gt;

&lt;pre&gt;
GET http://www.onlineshop.com?search=something
&lt;/pre&gt;

&lt;p&gt;If the site finds something, it returns a list of results, but if it doesn’t, it’s going to say&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Your search, ‘something’, returned no results.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;…which is just the original, unaltered string. A crafty attacker might see this vulnerability and might send an email to the user asking him to click on a link which for the search term in the query string, contains some nefarious script block. If the user clicks on the link (which is likely because most people don’t hover on links to see where they lead to), the application server won’t be able to find any result, and will return with a &lt;em&gt;not found&lt;/em&gt; page containing the script rendered directly on the page.&lt;/p&gt;

&lt;pre&gt;
GET http://www.onlineshop.com?
  search=%3Cscript%2520src%3D%22http%3A%2F%2Fsomesite.com%2Fscript.js%22%3E%3C%2Fscript%3E
  HTTP/1.1
&lt;/pre&gt;

&lt;p&gt;This script can then hijack the session cookie, like in the previous example.&lt;/p&gt;

&lt;p&gt;What can we do about it? Actually two things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Validate inputs: this means checking that the user didn’t try to input any funky stuff and warning him if this is the case.&lt;/li&gt;
  &lt;li&gt;Sanitize outputs: everything that’s rendered to the page must be HTML escaped. This means that script blocks will be displayed as text, and won’t be part of the DOM, and thus executed.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you are developing with Node / Express, there are plenty of packages to help you safeguard against XSS attacks, such as &lt;a href=&quot;https://www.npmjs.com/package/helmet&quot;&gt;helmet&lt;/a&gt; or &lt;a href=&quot;https://www.npmjs.com/package/xssfilter&quot;&gt;xssfilter&lt;/a&gt; etc.&lt;/p&gt;

&lt;h2 id=&quot;session-hijacking&quot;&gt;Session Hijacking&lt;/h2&gt;
&lt;p&gt;Most web applications use a session mechanism which allows the server hosting the web application to know which user is making a specific request. Sessions usually involve authenticating the user, creating some sort of &lt;em&gt;session_id&lt;/em&gt; (usually a string) and setting a cookie with that value on the user’s browser. Session hijacking is a way of getting to know that string.&lt;/p&gt;

&lt;p&gt;One way to gain access to it is, as I mentioned, cross-site scripting. Another typical way of gaining access to that cookie is by sniffing packets. Since browsers send the cookies associated with a domain for every request, somebody sniffing traffic would be able to see also the value of the session cookie. A typical way to sniff traffic is to set up an unencrypted Wi-Fi hotspot in a public place, and monitor the traffic of the people connecting to it. Does this mean I cannot use my online banking when I am connected to a public hotspot? No, because if the website uses SSL for all requests, the contents of the traffic won’t be intelligible to a man-in-the-middle, and usually major sites like Facebook / Twitter, online banking etc. are pretty well secured. There are however plenty of smaller poorly written sites that only use SSL for the login page, and then pass the session cookie unencrypted to other pages.&lt;/p&gt;

&lt;p&gt;Another way to gain access to a user’s session is to get that user to install a malware on his/hers computer. Since browsers usually store cookies on disk, that malware would be able to access the cookie if it knows where to look for it.&lt;/p&gt;

&lt;p&gt;A yet another way of accomplishing session hijacking is &lt;em&gt;session fixation&lt;/em&gt;. There are plenty of sites that accept a session ID in the URL, such as:&lt;/p&gt;

&lt;pre&gt;
http://www.website.com?sid=asb1sadasdasdan23123
&lt;/pre&gt;

&lt;p&gt;The reason why they do it is because a lot of users turn of their cookies, ironically, for security reasons. This however would open them up to scams, like somebody sending them an email which says:&lt;/p&gt;

&lt;blockquote&gt;
Hey, click on http://www.website.com?sid=asb1sadasdasdan23123, and enter credit card and address information to receive a free bonus on your order.
&lt;/blockquote&gt;

&lt;p&gt;Since the attacker knows the session id, he/she can also log to that page and see the information inputted by the user.&lt;/p&gt;

&lt;h2 id=&quot;cross-site-request-forgery&quot;&gt;Cross-Site Request Forgery&lt;/h2&gt;
&lt;p&gt;CSRF is an attack that tricks the victim into submitting a malicious request, and relies on the fact that the user is logged in. Since the browser usually sends the session cookie with the request, the server perceives the request as legitimate. An important part of CSRF attacks is &lt;em&gt;social engineering&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/security/csfr.png&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s say a site exposes some functionality in the form of a web request, like so:&lt;/p&gt;

&lt;pre&gt;
GET https://www.thesite.com/account?password=val HTTP/1.1
&lt;/pre&gt;

&lt;p&gt;This example is a bit contrived and oversimplified, but you get the picture. If the attacker can get the user to click on a link which points to that link &lt;strong&gt;while logged in&lt;/strong&gt;, that’s going to have the effect of changing the password for the user to whatever the attacker wants. This link can be part of an email, or it can be part of a message on a public board or a website set up by the attacker etc.&lt;/p&gt;

&lt;p&gt;An action that changes the password will more likely be a POST than a GET, but that doesn’t make it CSRF-proof either, because a user can be tricked into submitting a form. Here’s how that would work: you could have a form with a hidden input like so:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/6862d6a60d2dc4418a38fd81ae69e5bd.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Using HTML forms with email is not really possible, because a lot of clients disable them or warn about them, but you could redirect the user to a page hosted somewhere. It turns out you don’t even have to trick him/her to click on the submit button, that can be done by the site using Javascript (say by reacting to the document load event).&lt;/p&gt;

&lt;p&gt;How about PUT and DELETE? Turns out that the &lt;em&gt;same-origin policy&lt;/em&gt; helps us here, because attackers cannot do XHR requests from their site to the &lt;em&gt;http://www.thesite.com&lt;/em&gt;. It’s also why for POST attacks a form is being used instead of an POST XHR. SOP blocks that too.&lt;/p&gt;

&lt;h2 id=&quot;sql-injection&quot;&gt;SQL Injection&lt;/h2&gt;
&lt;p&gt;And last (in our article), but certainly not least, we have SQL injection. I think most of us remember this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/security/exploit.png&quot; alt=&quot;exploit&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For SQL injection to work, you’d have to be writing your SQL queries using string interpolation / concatenation.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/e842b81f3e4d1fef85087134717a1571.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;As you can see, the text fits nicely in the query. The way you get around this is by using parameters, which are supported by all database systems.&lt;/p&gt;</content><author><name></name></author><summary type="html">I can testify that a lot of people confided in me they considered doing this (including yours truly) under the frustration of the bi-monthly administrative policies that mandated we change our workstation password:</summary></entry><entry><title type="html">CORS Made Simple</title><link href="http://localhost:4000/cors-made-simple" rel="alternate" type="text/html" title="CORS Made Simple" /><published>2017-09-09T06:39:37+03:00</published><updated>2017-09-09T06:39:37+03:00</updated><id>http://localhost:4000/cors-made-simple</id><content type="html" xml:base="http://localhost:4000/cors-made-simple">&lt;p&gt;CORS stands for &lt;em&gt;Cross-Origin Resource Sharing&lt;/em&gt; and if you’ve built rich client applications that communicate with an API via REST, you have probably crossed paths with something known as &lt;em&gt;same-origin policy&lt;/em&gt;. What this policy refers to is that an application cannot access resources via &lt;a href=&quot;https://www.w3schools.com/xml/xml_http.asp&quot;&gt;XMLHttpRequest&lt;/a&gt; or the &lt;a href=&quot;https://developers.google.com/web/updates/2015/03/introduction-to-fetch&quot;&gt;Fetch API&lt;/a&gt; that come from a different URL than where the page was originally served from.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/cors/cors.png&quot; alt=&quot;cors&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is a restriction implemented on the browser level—if you load a page that contains Javascript that is attempting to do an XHR request, you are are going to get an error. CORS is a mechanism to bypass this restriction. It allows the server to “accept” calls incoming from a different origin. The reason I am using quotes is because, as previously mentioned, it’s actually the browser that implements the restriction, but the server has the option of specifying several headers in the response that will make the browser accept the response.&lt;/p&gt;

&lt;h2 id=&quot;specifics&quot;&gt;Specifics&lt;/h2&gt;
&lt;p&gt;OK, so let’s get into specifics: first let’s see what exactly constitutes the same origin and what is a different origin. The policy looks at the protocol (http or https), port number and host URL. Let’s assume that our page is served from &lt;em&gt;http://domain1.page.com/index.html&lt;/em&gt;. Accessing the following URLs will give the following results:&lt;/p&gt;

&lt;pre&gt;
http://domain1.page.com/items/3213
# Success.

https://domain1.page.com/items/12
# This fails because it's using https instead of http.

http://somethingelse.com/
# Fails because it's a totally different domain.

http://domain2.page.com/items/32
# Fails because the subdomain is different

http://domain1.page.com:9000/items/32
# Fails because the port is different.
&lt;/pre&gt;

&lt;p&gt;Of course, if you ever built applications using a microservice architecture, you know that sometimes it’s desirable to allow access to the backend for applications that will be hosted elsewhere, but you don’t necessarily want to open access to everybody. So CORS is sort of a middle-road between the two and it comes in handy when your applications are distributed because sometimes you just want to hook up things without configuring proxies and whatnot.&lt;/p&gt;

&lt;blockquote&gt;
We first must make the distinction between &lt;b&gt;simple requests&lt;/b&gt; and &lt;b&gt;preflighted requests&lt;/b&gt;.
&lt;/blockquote&gt;

&lt;p&gt;A simple request is a GET, POST or HEAD that meets a few conditions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;No event listeners are registered on any &lt;em&gt;XMLHttpRequestUpload&lt;/em&gt; object used in the request and no &lt;em&gt;ReadableStream&lt;/em&gt; object is used in the request.&lt;/li&gt;
  &lt;li&gt;The only accepted headers are “CORS”: &lt;em&gt;Accept, Accept-Language, Content-Language, Content-Type, Last-Event-ID, DPR, Downlink, Save-Data, Viewport-Width&lt;/em&gt; and &lt;em&gt;Width&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;The accepted values for the Content header are: &lt;em&gt;application/x-www-form-urlencoded, multipart/form-data&lt;/em&gt; and &lt;em&gt;text/plain&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If the server supports CORS, it will return a response specifying a value for the &lt;em&gt;Access-Control-Allow-Origin&lt;/em&gt; header:&lt;/p&gt;

&lt;pre&gt;
Access-Control-Allow-Origin: *
# this allows access from any origin

Access-Control-Allow-Origin: http://domain2.page.com
# allows access from domain2.page.com

# etc.
&lt;/pre&gt;

&lt;p&gt;A &lt;em&gt;preflighted request&lt;/em&gt; is one that &lt;strong&gt;automatically&lt;/strong&gt; triggers an OPTIONS call to the server before the actual request. It looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/cors/cors_flow.png&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;If any of the conditions for the request to be a simple request is violated, then we have a preflighted request on our hand. Which means that if we want to support CORS, our server needs to be able to respond to OPTIONS requests accordingly.&lt;/p&gt;

&lt;p&gt;This means we need something like:&lt;/p&gt;

&lt;pre&gt;
HTTP/1.1 200 OK
...
Access-Control-Allow-Origin: http://page.com
Access-Control-Allow-Methods: POST, GET, OPTIONS
Access-Control-Allow-Headers: Content-Type
&lt;/pre&gt;

&lt;p&gt;…in order to tell the browser it’s actually OK to send the real request.&lt;/p&gt;

&lt;p&gt;The whole concept of a “preflight request” seems a bit strange and you might be wondering why it was included in the spec. Couldn’t all requests be made without a preflight? A key concept to understand is that the role of the OPTIONS request doesn’t have to do with security.&lt;/p&gt;

&lt;blockquote&gt;
Preflight requests have the role of preserving the semantics of the web before CORS.
&lt;/blockquote&gt;

&lt;p&gt;In most previous applications (before REST and client side applications became popular) involved GETs for retrieving webpages, and POSTs for posting back form data. Old webserver which are CORS agnostic would never expect to receive a cross-domain DELETE request, and might behave unexpectedly in such cases. The preflight request is a way around this potential issue – it allows to actually query the backend and see if it supports CORS in a safe manner. You might have noticed that the allowed verbs are the ones that read and create data but NOT the ones that can modify existing information – like DELETE and PUT. Now you might be wondering: &lt;em&gt;couldn’t somebody just send a DELETE request via a tool like Postman, since CORS is implemented on the browser level?&lt;/em&gt; Sure, but that wouldn’t be a problem because backend services usually require authentication that would be stored locally in the form of a cookie and would be accessible to Javascript running in the browser but not to somebody doing a request using Postman.&lt;/p&gt;

&lt;h2 id=&quot;in-closing&quot;&gt;In Closing&lt;/h2&gt;
&lt;p&gt;Of course, you probably don’t want to be doing all that yourself, which is why there are libraries for supporting CORS in most platforms. If you’re using Node, it’s very simple to support CORS by using the &lt;a href=&quot;https://www.npmjs.com/package/cors&quot;&gt;cors library&lt;/a&gt; which is just simple Express middleware.&lt;/p&gt;

&lt;pre&gt;
npm install cors --save
&lt;/pre&gt;

&lt;p&gt;Using it is also very simple, it just needs to be registered as a middleware with Express.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/de8610422124cce393883120e77e150b.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Configuring Rails to use CORS is equally easy.&lt;/p&gt;</content><author><name></name></author><summary type="html">CORS stands for Cross-Origin Resource Sharing and if you’ve built rich client applications that communicate with an API via REST, you have probably crossed paths with something known as same-origin policy. What this policy refers to is that an application cannot access resources via XMLHttpRequest or the Fetch API that come from a different URL than where the page was originally served from.</summary></entry><entry><title type="html">Hot Module Reloading With Wepack, React And Babel</title><link href="http://localhost:4000/react-hmr" rel="alternate" type="text/html" title="Hot Module Reloading With Wepack, React And Babel" /><published>2017-09-07T06:39:37+03:00</published><updated>2017-09-07T06:39:37+03:00</updated><id>http://localhost:4000/react-hmr</id><content type="html" xml:base="http://localhost:4000/react-hmr">&lt;p&gt;Here’s what most people that worked with Webpack would agree: setting it up is not exactly a walk in the park, especially if you are trying to do multiple things at once like transpiling from ES6, using hot reloading and proxying your backend. But that’s what I am trying to change with this article.&lt;/p&gt;

&lt;p&gt;We are going to use the application we built in the &lt;a href=&quot;http://achiral.io/ruby-object-model&quot;&gt;previous article&lt;/a&gt; and add HMR to it. First of all, in order to use Hot Module Reloading in Webpack we must use the Webpack Dev Server which is essentially a Node / Express wrapper. Second, the HMR module doesn’t do a whole lot unless we are able to take advantage of it, and this is where the React HMR module comes in. Third, because we want to use ES6, we’ll be using the &lt;em&gt;babel-es2015-preset&lt;/em&gt; and we will be configuring a &lt;a href=&quot;https://webpack.js.org/concepts/#loaders&quot;&gt;loader&lt;/a&gt; for Webpack. Also we are going to use Babel to transpile the .jsx syntax.&lt;/p&gt;

&lt;blockquote&gt;
Webpack at its core is just a module bundler. It essentially detects dependencies between the building blocks of your application (like code files, style files etc.) and creates a bundle out of everything.
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/images/hmr/schematic.png&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It doesn’t actually do things like transpilation — if you have Coffee-script code, Typescript or ES6 code, you will have to use a loader. We will be using &lt;em&gt;babel-loader&lt;/em&gt; to compile our ES6/jsx code and feed it into Webpack.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/images/hmr/webpack-schematic.png&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;On the other side of the chain there are &lt;a href=&quot;https://webpack.js.org/concepts/#plugins&quot;&gt;plugins&lt;/a&gt; like uglifyJS (which we’re not using in the code sample, but I’ve added it in the drawing as an example of a plugin), which is a Javascript minifier. Another plugin example is &lt;em&gt;webpack-dev-server&lt;/em&gt; which we will be using to implement hot reloading.&lt;/p&gt;

&lt;h2 id=&quot;lets-jump-right-in&quot;&gt;Let’s Jump Right In&lt;/h2&gt;
&lt;p&gt;The dependencies section of the &lt;em&gt;package.json&lt;/em&gt; file look like this:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/a7470f4ca4cadea9e8bc86573ecc4215.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Our &lt;em&gt;.babelrc&lt;/em&gt; file looks like this:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/f2264a5abc5f1ee8904ff6b93aa18feb.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;And finally, let’s have a look at the Webpack configuration page.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/cff7cfbc3619a8115c880a22c8530697.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;adding-hot-reloading&quot;&gt;Adding Hot Reloading&lt;/h2&gt;
&lt;p&gt;Webpack Hot Module Replacement works by adding a small runtime to the generated bundle (which is going to run alongside your app) that constantly communicates with the server and if part of the dependency tree changes, it will inject the new dependencies. However, in order for this process to take place, we need to setup the Webpack Development Server, which means we need to add the following lines of code in the &lt;em&gt;webpack.config.js&lt;/em&gt; file in the configuration object.&lt;/p&gt;

&lt;pre&gt;
plugins: [
  new webpack.HotModuleReplacementPlugin()
],
devServer: {  
  proxy: {
    '*': 'http://localhost:3000'
  },
  hot: true,
  contentBase: './src/static',
  port: 9000   
}
&lt;/pre&gt;

&lt;p&gt;Second, we actually need React to &lt;strong&gt;do something&lt;/strong&gt; when the bundle changes, which is where the &lt;em&gt;react-hot-loader&lt;/em&gt; package comes into play. A module can only be updated if you “accept” it. So you need to &lt;em&gt;module.hot.accept()&lt;/em&gt; the module in the parents or the parents of the parents.&lt;/p&gt;

&lt;p&gt;Have a look at the following code:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/d4d9e62d2b36d768bbefc78c7c084817.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;You can find the source code &lt;a href=&quot;https://github.com/toaderflorin/react-hmr&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">Here’s what most people that worked with Webpack would agree: setting it up is not exactly a walk in the park, especially if you are trying to do multiple things at once like transpiling from ES6, using hot reloading and proxying your backend. But that’s what I am trying to change with this article.</summary></entry><entry><title type="html">Simple Component Based Architecture With React</title><link href="http://localhost:4000/component-architecture" rel="alternate" type="text/html" title="Simple Component Based Architecture With React" /><published>2017-08-22T06:39:37+03:00</published><updated>2017-08-22T06:39:37+03:00</updated><id>http://localhost:4000/component-architecture</id><content type="html" xml:base="http://localhost:4000/component-architecture">&lt;p&gt;I normally wouldn’t have wrote this article as I find what I am about to present quite straightforward, but I’ve heard this sentence (or something along those lines) multiple times: &lt;em&gt;Let’s not use React because it would be an overkill for our application. We would have to use Flux / Redux and it’s too much for what we need.&lt;/em&gt; No, you don’t,  and this is important: React is just a view layer. Flux is an architectural pattern, but it doesn’t mean you have to use it if you are using React and you can also use Flux even if you are using another library—in fact it’s quite popular to use Flux with Angular. React (just like Angular 2+) is built around components, and building a web application out of components is perfectly feasible, as I will show.&lt;/p&gt;

&lt;p&gt;Our goal for this demo app is to avoid using a separate store to keep the application architecture simple, but at the same time we want to avoid things like partial page updates or a lot of stateful event based interactions which lead to spaghetti like dependencies in our code. Here’s an example of interaction I’ve unfortunately encountered all too often in UI code:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The user changes a text input field which triggers a handler. That handler does some processing and does some partial updates in some other part of the UI which in turn triggers another set of events, which trigger more processing and more UI updating etc.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/component-architecture/big-ball.png&quot; alt=&quot;big-ball&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can quickly see that this kind of approach becomes unwieldy quite fast, so we are going to do two things to mitigate this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;We will keep the whole application state as the state of the top level &lt;em&gt;App&lt;/em&gt; component.&lt;/li&gt;
  &lt;li&gt;We are going to use a &lt;em&gt;top-down&lt;/em&gt; approach, were the top level component acts as a sort of manager and coordinates what’s happening.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Because components naturally form a hierarchy, we can use that hierarchy to act like sort of a &lt;em&gt;chain of command&lt;/em&gt;. What we are trying to avoid here is components talking &lt;em&gt;directly to one another&lt;/em&gt;, because that would mean NxN complexity and partial page updates. What they should do instead is they should communicate through their superior — that would mean receiving commands (like display this data) and sending notifications up the hierarchy (action X has been performed by the user like submitting a form, for example).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/component-architecture/dilbert.jpg&quot; alt=&quot;dilbert&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So no component should tell other component (on the same hierarchical level) it’s a piece of garbage &lt;em&gt;directly&lt;/em&gt;. But it’s OK if a component “higher in command” does it.&lt;/p&gt;

&lt;h2 id=&quot;the-application&quot;&gt;The Application&lt;/h2&gt;

&lt;p&gt;We are going to build an application that allows a user to manage a list of todos. For the sake of simplicity, we are going to have a backend that globally manages a collection of tasks, so we don’t support multiple users. The application is meant to be run locally and we will demonstrate how to structure it with components. Here’s a sketch of what we want our application to look like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/component-architecture/sketch.png&quot; alt=&quot;sketch&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The dotted lines indicate how we want to split our application into smaller pieces—the components that are going to make up the application. This means we get this hierarchy:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/component-architecture/hierarchy.png&quot; alt=&quot;hierarchy&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
Codewise, this is what the top level component looks like:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/f16af2f7d587cd628e45543b34c0b446.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;As you can see, it contains the methods for adding and removing todos. These are passed down as props to the &lt;em&gt;AddTask&lt;/em&gt; and &lt;em&gt;TaskList&lt;/em&gt; components respectively.&lt;/p&gt;

&lt;p&gt;Here is the &lt;em&gt;AddTask&lt;/em&gt; component:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/acf3aa438d747ff6fde2250ba976a897.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; You might have been worried about sending all that information up the chain of command. Turns out that we don’t need to notify the &lt;em&gt;App&lt;/em&gt; component for every keystroke that changes the input field, no need to bother the boss with irrelevant information every half a second or so. That’s why this component is going to have &lt;em&gt;some private state&lt;/em&gt; of its own. Since we have to track the value of the input field component and we will be reacting on the &lt;em&gt;onChanged&lt;/em&gt; event of the input in order to keep the state and the input value in sync. We also won’t be able to use a functional (stateless) component here because of this.&lt;/p&gt;

&lt;p&gt;And last but not least, the list of tasks:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/70e6cbc872f55cf9cfe3fdf546fb1178.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;and…&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/6ab7f1bbf8faa03609b7df11332a83be.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;It is desirable to use functional components whenever possible. Not only are they easier to write and the code is more succinct, but the fact that don’t handle their own state is also advantageous. The &lt;em&gt;TaskList&lt;/em&gt; component just passes the &lt;em&gt;deleteTaskClick&lt;/em&gt; handler through to the &lt;em&gt;Task&lt;/em&gt; component. We are using a similar bind approach here, as we did for &lt;em&gt;AddTask&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The code was slightly tweaked and simplified for legibility, download the full version &lt;a href=&quot;https://github.com/toaderflorin/florintoader&quot;&gt;here&lt;/a&gt;. And of course, this is a very simple application — if you are using a component based approach, you will probably have multiple “levels of command” in the component hierarchy, similar to what you would have in a big organization. You need to use your judgement in designing the application state, splitting it into components, assigning responsibilities to each and splitting the state accordingly. You might however reach the conclusion that it’s worth using Redux / Flux as the application gets larger.&lt;/p&gt;</content><author><name></name></author><summary type="html">I normally wouldn’t have wrote this article as I find what I am about to present quite straightforward, but I’ve heard this sentence (or something along those lines) multiple times: Let’s not use React because it would be an overkill for our application. We would have to use Flux / Redux and it’s too much for what we need. No, you don’t, and this is important: React is just a view layer. Flux is an architectural pattern, but it doesn’t mean you have to use it if you are using React and you can also use Flux even if you are using another library—in fact it’s quite popular to use Flux with Angular. React (just like Angular 2+) is built around components, and building a web application out of components is perfectly feasible, as I will show.</summary></entry><entry><title type="html">Relational Database Isolation Levels Explained</title><link href="http://localhost:4000/isolation-levels" rel="alternate" type="text/html" title="Relational Database Isolation Levels Explained" /><published>2017-07-02T06:39:37+03:00</published><updated>2017-07-02T06:39:37+03:00</updated><id>http://localhost:4000/isolation-levels</id><content type="html" xml:base="http://localhost:4000/isolation-levels">&lt;p&gt;This seems to be a murky concept for a lot of developers, so I thought I
would give a simple explanation. The concept of isolation is related to what happens when two or more transactions attempt to access (read and write) the same data at the same time.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/isolation-levels/levels.png&quot; alt=&quot;levels&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The SQL standard defines four isolation levels:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Read uncommitted&lt;/li&gt;
  &lt;li&gt;Read committed&lt;/li&gt;
  &lt;li&gt;Repeatable reads&lt;/li&gt;
  &lt;li&gt;Serializable&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Most developers can explain the difference between Read committed and Serializable—between no locking at all and full locking. To understand the intermediary isolation levels, one needs to understand the difference between &lt;em&gt;dirty reads, non repeatable reads, and phantom reads&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Let’s try to explain them one by one.&lt;/p&gt;

&lt;h2 id=&quot;dirty-reads&quot;&gt;Dirty Reads&lt;/h2&gt;

&lt;p&gt;A dirty read is the simplest form of a problem that can occur. It means that a transaction can read the changes of another transaction, before that transaction has committed those changes. If a transaction is doing some calculations on a data row (say, part of a stored procedure), and stores the intermediary values of the calculation in the database, the other transactions will see this intermediary data.&lt;/p&gt;

&lt;p&gt;This is the &lt;strong&gt;read uncommitted&lt;/strong&gt; isolation level.&lt;/p&gt;

&lt;h2 id=&quot;non-repeatable-reads&quot;&gt;Non Repeatable Reads&lt;/h2&gt;

&lt;p&gt;A non repeatable read offers a bit more protection. Other transactions only see data once it is committed. There is however the problem that while a transaction is running, another transaction might have changed and committed the value for a certain row in the meantime. If a row is accessed multiple times during to course of a transaction, that transaction might see different values for the same row.&lt;/p&gt;

&lt;p&gt;This is the &lt;strong&gt;read committed&lt;/strong&gt; isolation level.&lt;/p&gt;

&lt;p&gt;The repeatable reads isolation level solves the previous problem. In this case, when a transaction reads a row, it also locks it so that no other transaction will be able to modify it until the current transaction is finished. This way it avoids the case where the value can be changed, but it also introduces more contention in the database because transactions now have to wait more after one another.&lt;/p&gt;

&lt;h2 id=&quot;phantom-reads&quot;&gt;Phantom Reads&lt;/h2&gt;

&lt;p&gt;Then there is the problem of phantom reads. So far, all the locking was done on the row level, to prevent issues with updates on data items. But let’s consider another scenario: a transaction doesn’t change existing items in a table, but instead inserts new items. Other long running transactions might query this table multiple times during their execution and get different collections.&lt;/p&gt;

&lt;p&gt;The serializable isolation solves this problem in a similar way to the previous isolation level. When reading data, it also places a lock on it—the difference is that instead of placing data on a row, it places a lock on a range.&lt;/p&gt;

&lt;p&gt;This range is based on the query - for example:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/181e34df07fcb647671e9512c3e276bf.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Obviously, this introduces even more contention.&lt;/p&gt;</content><author><name></name></author><summary type="html">This seems to be a murky concept for a lot of developers, so I thought I would give a simple explanation. The concept of isolation is related to what happens when two or more transactions attempt to access (read and write) the same data at the same time.</summary></entry><entry><title type="html">Under The Hood: V8 Internals</title><link href="http://localhost:4000/v8-internals" rel="alternate" type="text/html" title="Under The Hood: V8 Internals" /><published>2017-06-16T06:39:37+03:00</published><updated>2017-06-16T06:39:37+03:00</updated><id>http://localhost:4000/v8-internals</id><content type="html" xml:base="http://localhost:4000/v8-internals">&lt;p&gt;&lt;img src=&quot;/images/chrome.png&quot; alt=&quot;chrome&quot; class=&quot;img-responsive img-left&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Dynamic languages get a lot of love in the startup community, and it’s not hard to see why—they are mostly open source, they are cross platform, and it’s very easy get an application up and running because their syntax tends to be very terse, and you can write a lot of functionality with very little code. But as a wise man used to say, with great power comes great responsibility, and as great as Ruby on Rails is, it’s no secret that Ruby is not exactly fast—depending on the benchmark you’re using, it’s about two orders of magnitude (that’s 100 times) slower than something like Java. Of course as a whole, RoR applications are not that slow because a lot of execution time is spent in native extensions such as querying the database—Ruby and Rails only serve the purpose of gluing stuff together. Nevertheless, more and more companies are moving from Rails to node.js or Go, and they are doing it for performance reasons / scalability. Another reason to use node.js is the fact that you can share code between the server-side and the client-side, but I digress.&lt;/p&gt;

&lt;p&gt;For those who have not used node.js, it uses Google’s V8 JavaScript engine which powers Chrome, and it’s fast. And the reason why it’s fast is because it actually compiles you JS code instead of interpreting it. The whole process works as follows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;V8 evaluates the JavaScript in your file and does just-in-time compilation to machine code using a compiler that’s designed to compile as fast as possible, and then stores the compiled code for that portion of the program.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;V8 also maintains a hot-map of the code that runs. If it sees functions being run several times, it will use a second compiler which optimizes your code, but it’s slower.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The engine also relies heavily on making assumptions about your code, and optimizing preemptively.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;What’s interesting is that V8 doesn’t treat objects as hash-tables, as most JS engines do—it instead creates a sort of struct with the properties of the object, which it calls a hidden class. You can think of this hidden class as similar to Ruby’s eigenclasses.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/6dafc797abe6a17bb7d63d8d94e22fb5.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;If you add a new property to obj1, V8 is no longer able map the properties of the object to the same hidden class, so it will create a new one. V8 also tries to preemptively optimize your code and it does so by looking for repetitions.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;JavaScript is a dynamic language but the more you are using it as a statically typed language, the better of you are when it comes to optimizations.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you are using ES6 (and I recommend that you do because there are great transpilation / bundling tools such as Babel and Webpack, not to mention the current version of node.js 7.10 has native support for classes, lambdas, await/async and a lot of other nifty stuff)— I suggest you use classes to structure your project, and use getters and setters.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/eb5fb6e45dd943a3f6ad87da7f1fe827.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Of course, there’s nothing preventing you from modifying the “private” fields in JavaScript (except maybe a code review from your technical lead), and also there is nothing preventing you from adding new properties to the object (except using Object.freeze() but this has a performance penalty). Not only will this give you better encapsulation, but it will speed up your code because V8 is able to optimize it better. Of course, if you really want to have private members and proper static (compile time) type checking, you can use Facebook’s Flow, or Microsoft’s TypeScript.&lt;/p&gt;

&lt;p&gt;Also, a lot of developers tend to use plain JS objects as dictionaries because objects are key-value pairs. However, knowing how the V8 compiler optimizer works, that’s not a very good idea. Computed property names are also problematic for the optimizer, and they make code also hard to understand, so they should be avoided. The Map object is great, if you need to use key-value pairs.&lt;/p&gt;

&lt;p&gt;Another word of caution: be extra careful with arrays. Check out the following code:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/2b22591a73bd61ad4b07dec88fdae5b7.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;As long as an array doesn’t have holes in it, it’s going to be treated as a contiguous memory area, which makes the code using it fast. However, if you get fancy like in the example above, you are going to have a sparse array, and V8 will convert it to a hash-table, which will make writing and reading slower.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;tldr;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The closer your JavaScript program is to static typed code, the better V8 is going to be able to optimize your code using static analysis. You can use TypeScript / Facebook Flow to enforce this.&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry></feed>