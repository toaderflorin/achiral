<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-07-10T11:47:59+03:00</updated><id>http://localhost:4000/</id><title type="html">blog</title><subtitle>achiral offers consulting and custom software development services on the node.js, Ruby on Rails and .NET stacks.
</subtitle><entry><title type="html">Redux Thunk: The Redux Async Flow And Handling Side Effects</title><link href="http://localhost:4000/jekyll/update/2017/06/20/redux-async-flow.html" rel="alternate" type="text/html" title="Redux Thunk: The Redux Async Flow And Handling Side Effects" /><published>2017-06-20T06:39:37+03:00</published><updated>2017-06-20T06:39:37+03:00</updated><id>http://localhost:4000/jekyll/update/2017/06/20/redux-async-flow</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2017/06/20/redux-async-flow.html">&lt;p&gt;Redux advertises itself as a predictable state container for JavaScript applications and if you are just getting started with Redux 
(whether you are using it with React or Angular or another framework), you might have started reading the official documentation, and 
know that Redux is Flux implementation. Here’s a quick refresher of the Flux architecture:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flux-simple.png&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The idea behind Flux is that the user interface doesn’t modify the state of the application directly - instead it sends &lt;em&gt;actions&lt;/em&gt; to a dispatcher, 
which then in turn notifies on ore more &lt;em&gt;data stores&lt;/em&gt; who are interested in particular action and they handle that action, they change their
internal state and then update the view components. A key aspect to take away from here is that the data flow is &lt;em&gt;unidirectional&lt;/em&gt;, as I explained in my architecture article. You can find Facebook’s Flux implementation here.&lt;/p&gt;

&lt;p&gt;Redux is an alternative Flux implementation, sort of. The reason I say sort of, is because it doesn’t follow the architecture 100%, just loosely. 
Instead of using a dispatcher that sends actions to multiple stores, it uses &lt;strong&gt;a single store&lt;/strong&gt; which keeps the state for the whole application,
and a concept known as a &lt;em&gt;reducer&lt;/em&gt; which is essentially a function that gets the current state and an action, and produces a new state based on
the action.&lt;/p&gt;

&lt;p&gt;It looks something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/redux.png&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Redux is heavily inspired by Elm, which is a functional programming language, and it takes quite a few ques from it - the application 
state reducer (in a real application, we are actually chaining multiple reducers into a big one, because otherwise the whole thing would become,
unwieldy very fast), needs to be a &lt;em&gt;pure&lt;/em&gt; function - which means it’s not allowed to have &lt;em&gt;side-effects&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In Redux, an action is just a plain object - the only requirement is that this object has to have a &lt;em&gt;type&lt;/em&gt; property. An action creator is just a 
plain JS function that returns an action object. It looks something like this:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/dbd3ad78285ecd7decfec8cd88877eb3.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;a-bit-of-functional-programming&quot;&gt;A Bit Of Functional Programming&lt;/h2&gt;

&lt;p&gt;Let’s explore these concepts by looking at a couple of functions first:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/867f25d45b36c65b8b409e3eca851091.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Action creators are just normal JavaScript functions that return an Action object - and an object can be any type of JS obiect in Redux, the only 
requirement is to have a &lt;em&gt;type&lt;/em&gt; property of type string. The first function is &lt;em&gt;pure&lt;/em&gt; because it’s return result is &lt;strong&gt;always&lt;/strong&gt; reproducible for 
the same input parameter, which is not the case for the second function. Now have a look at the following function:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/96c280e5330d84851f103710ed381524.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;This function is said to have side-effects, because it changes a global variable which then changes the return value on subsequent
calls. Obviously, functions that have side-effects are not pure.&lt;/p&gt;

&lt;h2 id=&quot;in-the-real-world&quot;&gt;In The Real World&lt;/h2&gt;

&lt;p&gt;We went over the basic Flux architecture and some simple functional concepts. However in the real world, web applications are rarely this simple. 
This initial architecture diagram is missing an essential aspect: server-side access. Obviously, this introduces side-effects, so as a result, the reducers 
won’t be pure anymore.&lt;/p&gt;

&lt;p&gt;A real world Flux architecture might look something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flux-2.png&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You might have noticed something that sits in between Flux and the server side API.&lt;/p&gt;

&lt;p&gt;Action creators are functions that create actions - this separation allows us to keep our action handlers pure, and does the dirty work for us.
It’s sort of like &lt;em&gt;man-in-the-middle&lt;/em&gt; pattern.&lt;/p&gt;

&lt;h2 id=&quot;enter-redux-thunk&quot;&gt;Enter Redux Thunk&lt;/h2&gt;

&lt;p&gt;Since Redux allows for custom middleware, we can use something called &lt;strong&gt;Redux Thunk&lt;/strong&gt; to help us. It is important to be aware that without
middleware, Redux only supports a synchronous flow. So what is a &lt;em&gt;thunk&lt;/em&gt;? It’s just a function - it wraps an expression, so you can delay 
the evaluation of the result of that expression. Here’s a code sample I “borrowed” (promise I will give it right back) straight from the 
library documentation:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/7961dfce75a8d1748b4192e3d16ed611.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;How does this help us you might ask?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you pass an expression as a parameter to another function, it will get evaluated within the same JavaScript event tick. If you pass a &lt;strong&gt;thunk&lt;/strong&gt; 
however, that function can evaluate it whenever it wants. This means you can do &lt;strong&gt;async&lt;/strong&gt; stuff easily.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;And this is important because modern web applications are mostly asynchronous in their nature - you usually build a rich responsive client which 
communicates with an API. This means when the user presses a button, or does something that needs fetching data, you usually show spinners and such. 
Redux helps us by providing &lt;em&gt;async actions&lt;/em&gt;, which integrate nicely with Redux Thunk.&lt;/p&gt;</content><author><name></name></author><summary type="html">Redux advertises itself as a predictable state container for JavaScript applications and if you are just getting started with Redux (whether you are using it with React or Angular or another framework), you might have started reading the official documentation, and know that Redux is Flux implementation. Here’s a quick refresher of the Flux architecture:</summary></entry><entry><title type="html">JavaScript Is A Dynamic Language: But You Might Not Want To Use It That Way</title><link href="http://localhost:4000/javascript/2017/06/16/statically-typed.html" rel="alternate" type="text/html" title="JavaScript Is A Dynamic Language: But You Might Not Want To Use It That Way" /><published>2017-06-16T06:39:37+03:00</published><updated>2017-06-16T06:39:37+03:00</updated><id>http://localhost:4000/javascript/2017/06/16/statically-typed</id><content type="html" xml:base="http://localhost:4000/javascript/2017/06/16/statically-typed.html">&lt;p&gt;&lt;img src=&quot;/images/chrome.png&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive img-left&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; I will mainly touch upon Google’s V8 engine, as Google Chrome is the most popular browser at this moment.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Dynamic languages get a lot of love in the startup community, and it’s not hard to see why — they are mostly open source, they are cross platform, and it’s very easy get an application up and running because their syntax tends to be very terse, and you can write a lot of functionality with very little code. But as a wise man used to say, with great power comes great responsibility, and as great as Ruby on Rails is, it’s no secret that Ruby is not exactly fast — depending on the benchmark you’re using, it’s about two orders of magnitude (that’s 100 times) slower than something like Java. Of course as a whole, RoR applications are not that slow because a lot of execution time is spent in native extensions such as querying the database — Ruby and Rails only serve the purpose of gluing stuff together. Nevertheless, more and more companies are moving from Rails to node.js or Go, and they are doing it for performance reasons / scalability. Another reason to use node.js is the fact that you can share code between the server-side and the client-side, but I digress.&lt;/p&gt;

&lt;p&gt;For those who have not used node.js, it uses Google’s V8 JavaScript engine which powers Chrome, and it’s fast. And the reason why it’s fast is because it actually compiles you JS code instead of interpreting it. The whole process works as follows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;V8 evaluates the JavaScript in your file and does just-in-time compilation to machine code using a compiler that’s designed to compile as fast as possible, and then stores the compiled code for that portion of the program.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;V8 also maintains a hot-map of the code that runs. If it sees functions being run several times, it will use a second compiler which optimizes your code, but it’s slower.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The engine also relies heavily on making assumptions about your code, and optimizing preemptively.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;What’s interesting is that V8 doesn’t treat objects as hash-tables, as most JS engines do — it instead creates a sort of struct with the properties of the object, which it calls a hidden class. You can think of this hidden class as similar to Ruby’s eigenclasses.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/6dafc797abe6a17bb7d63d8d94e22fb5.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;If you add a new property to obj1, V8 is no longer able map the properties of the object to the same hidden class, so it will create a new one. V8 also tries to preemptively optimize your code and it does so by looking for repetitions.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;JavaScript is a dynamic language but the more you are using it as a statically typed language, the better of you are when it comes to optimizations.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you are using ES6 (and I recommend that you do because there are great transpilation / bundling tools such as Babel and webpack, not to mention the current version of node.js 7.10 has native support for classes, lambdas, await/async and a lot of other nifty stuff) — I suggest you use classes to structure your project, and use getters and setters.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/eb5fb6e45dd943a3f6ad87da7f1fe827.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Of course, there’s nothing preventing you from modifying the “private” fields in JavaScript (except maybe a code review from your technical lead), and also there is nothing preventing you from adding new properties to the object (except using Object.freeze() but this has a performance penalty). Not only will this give you better encapsulation, but it will speed up your code because V8 is able to optimize it better. Of course, if you really want to have private members and proper static (compile time) type checking, you can use Facebook’s Flow, or Microsoft’s TypeScript.&lt;/p&gt;

&lt;p&gt;Also, a lot of developers tend to use plain JS objects as dictionaries because objects are key-value pairs. However, knowing how the V8 compiler optimizer works, that’s not a very good idea. Computed property names are also problematic for the optimizer, and they make code also hard to understand, so they should be avoided. The Map object is great, if you need to use key-value pairs.&lt;/p&gt;

&lt;p&gt;Another word of caution: be extra careful with arrays. Check out the following code:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/2b22591a73bd61ad4b07dec88fdae5b7.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;As long as an array doesn’t have holes in it, it’s going to be treated as a contiguous memory area, which makes the code using it fast. However, if you get fancy like in the example above, you are going to have a sparse array, and V8 will convert it to a hash-table, which will make writing and reading slower.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;tldr;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The closer your JavaScript program is to static typed code, the better V8 is going to be able to optimize your code using static analysis. You can use TypeScript / Facebook Flow to enforce this.&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Relational Database Isolation Levels Explained</title><link href="http://localhost:4000/jekyll/update/2017/05/02/isolation-levels.html" rel="alternate" type="text/html" title="Relational Database Isolation Levels Explained" /><published>2017-05-02T06:39:37+03:00</published><updated>2017-05-02T06:39:37+03:00</updated><id>http://localhost:4000/jekyll/update/2017/05/02/isolation-levels</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2017/05/02/isolation-levels.html">&lt;p&gt;This seems to be a murky concept for a lot of developers, so I thought I
would give a simple explanation. The concept of isolation is related to what happens when two or more transactions attempt to access (read and write) the same data at the same time.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/levels.png&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The SQL standard defines four isolation levels:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Read uncommitted&lt;/li&gt;
  &lt;li&gt;Read committed&lt;/li&gt;
  &lt;li&gt;Repeatable reads&lt;/li&gt;
  &lt;li&gt;Serializable&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Most developers can explain the difference between Read committed and Serializable — between no locking at all and full locking. To understand the intermediary isolation levels, one needs to understand the difference between &lt;em&gt;dirty reads, non repeatable reads, and phantom reads&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Let’s try to explain them one by one.&lt;/p&gt;

&lt;h2 id=&quot;dirty-reads&quot;&gt;Dirty Reads&lt;/h2&gt;

&lt;p&gt;A dirty read is the simplest form of a problem that can occur. It means that a transaction can read the changes of another transaction, before that transaction has committed those changes. If a transaction is doing some calculations on a data row (say, part of a stored procedure), and stores the intermediary values of the calculation in the database, the other transactions will see this intermediary data.&lt;/p&gt;

&lt;p&gt;This is the &lt;strong&gt;read uncommitted&lt;/strong&gt; isolation level.&lt;/p&gt;

&lt;h2 id=&quot;non-repeatable-reads&quot;&gt;Non Repeatable Reads&lt;/h2&gt;

&lt;p&gt;A non repeatable read offers a bit more protection. Other transactions only see data once it is committed. There is however the problem that while a transaction is running, another transaction might have changed and committed the value for a certain row in the meantime. If a row is accessed multiple times during to course of a transaction, that transaction might see different values for the same row.&lt;/p&gt;

&lt;p&gt;This is the &lt;strong&gt;read committed&lt;/strong&gt; isolation level.&lt;/p&gt;

&lt;p&gt;The repeatable reads isolation level solves the previous problem. In this case, when a transaction reads a row, it also locks it so that no other transaction will be able to modify it until the current transaction is finished. This way it avoids the case where the value can be changed, but it also introduces more contention in the database because transactions now have to wait more after one another.&lt;/p&gt;

&lt;h2 id=&quot;phantom-reads&quot;&gt;Phantom Reads&lt;/h2&gt;

&lt;p&gt;Then there is the problem of phantom reads. So far, all the locking was done on the row level, to prevent issues with updates on data items. But let’s consider another scenario: a transaction doesn’t change existing items in a table, but instead inserts new items. Other long running transactions might query this table multiple times during their execution and get different collections.&lt;/p&gt;

&lt;p&gt;The serializable isolation solves this problem in a similar way to the previous isolation level. When reading data, it also places a lock on it — the difference is that instead of placing data on a row, it places a lock on a range.&lt;/p&gt;

&lt;p&gt;This range is based on the query - for example:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/181e34df07fcb647671e9512c3e276bf.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Obviously, this introduces even more contention.&lt;/p&gt;</content><author><name></name></author><summary type="html">This seems to be a murky concept for a lot of developers, so I thought I would give a simple explanation. The concept of isolation is related to what happens when two or more transactions attempt to access (read and write) the same data at the same time.</summary></entry><entry><title type="html">Architectural Ramblings: Cohesion And Coupling</title><link href="http://localhost:4000/jekyll/update/2017/04/14/cohesion-and-coupling.html" rel="alternate" type="text/html" title="Architectural Ramblings: Cohesion And Coupling" /><published>2017-04-14T06:39:37+03:00</published><updated>2017-04-14T06:39:37+03:00</updated><id>http://localhost:4000/jekyll/update/2017/04/14/cohesion-and-coupling</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2017/04/14/cohesion-and-coupling.html">&lt;p&gt;When you are writing code, you are usually not working alone. That means working with other people’s code, so they need to understand your code and you need to understand theirs. Good code is something that you can understand by reading, not by debugging it (because debugging is an order of magnitude more time consuming. That means a few conditions need to be met.&lt;/p&gt;

&lt;p&gt;Probably the most important thing is knowing where to find things in the codebase.&lt;/p&gt;

&lt;h2 id=&quot;what-is-cohesion&quot;&gt;What Is Cohesion?&lt;/h2&gt;

&lt;p&gt;In software engineering, cohesion refers to how much items in a class are logically related to one another. An example of this would be having all your summer shirts neatly folded into one drawer, the casual t-shirts in another etc. How does it help? It’s obvious: when you are looking for something, you know exactly where to find it, so you don’t waste time with trial and error.&lt;/p&gt;

&lt;p&gt;Just try to find your favourite shirt in here:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/closet.jpeg&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;An architecture in which components have a high level of cohesion makes development fast, because developers don’t spend a lot of time searching through thousand of lines code, talking to one another, sending emails around and waiting etc. It’s just smooth. Now obviously nobody wants their closet to look like the previous picture, and nobody does it intentionally. Also I am 100% sure that the owner of this baby is well aware that this is not the tidiest closet on planet Earth. My experience is that when this happens in software development, the developers fully realize it (because devs are a pretty smart bunch of people), but there isn’t a lot they can do about it — it’s usually a by product of various outside pressures.&lt;/p&gt;

&lt;h2 id=&quot;what-is-coupling&quot;&gt;What Is Coupling?&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/rubik.png&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive, img-left&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ever tried solving a Rubik cube? What most people do is try to solve one or two faces, and then the rest. Problem is: after solving the first face, trying to do the next will mess up what you’ve already done. Actually, that’s not how you solve a Rubik cube, but that’s another story.&lt;/p&gt;

&lt;p&gt;The problem with the Rubik cube is that the faces are interdependent, and this kind of dependencies between faces (or components) is something that you want to avoid at all costs in software engineering. Imagine a team of 6 people (developers), who are trying to solve this puzzle. Each person does a move at a time, while the rest think. The first individual is trying to do the red face, the second is trying to do the blue face etc. Because the project is a bit behind schedule, six guys were brought in to make things go faster, instead of one. Probably, those guys are more likely to get on each other’s nerves than do anything particularly useful, because:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;They have different goals (each guy is trying to do his own user story, or face), and is evaluated as such by upper management.&lt;/li&gt;
  &lt;li&gt;They are not isolated from one another and are stepping on each other’s toes.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Consider the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Component A depends on component B (it has a direct reference to component B of some sort).&lt;/li&gt;
  &lt;li&gt;Component B has a dependence on component C.&lt;/li&gt;
  &lt;li&gt;And component C has a dependence on component A.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;What happens if you do some changes on A? Well, now the public signature of A is different and C will probably not work any more with A. So we need to change C. But B depends on C, so we also need to change B. So we just changed B, but remember that A was dependent on B. Is A now still compatible with the changes we made to B? We might need to change A again. But wait! If we change A again, will it still work with C? We have a chain of dependencies, and also a circular reference. If we don’t manage to fit the pieces together, we might have to throw the whole system away and start from scratch.&lt;/p&gt;

&lt;p&gt;This might sound like a contrived example, but it’s not. I encountered it quite a bit in client side applications and in systems based on events that maintain and manipulate state. One button click would trigger some computation and then partial update of just some sections of the UI, including setting values on various controls. Change event handlers on these controls (text-box or other input elements) would trigger additional computations and partial updates in other parts of the UI and would also set public state flags used by other events that update other parts of the UI etc. Sometimes the partial updates would overlap and cause circular dependencies, or a very complicated flow that is hard to follow / change. SPAs not using an MVC, MVVM or a Flux pattern are even more problematic because many times they involve unobtrusive attachment of event handlers, and auto-magic JS is notoriously hard to debug when it’s not working properly.&lt;/p&gt;

&lt;p&gt;The problem is in the real world these structures usually evolve unplanned and organically (like a tree’s branches growing in all directions). One developer has to solve a bug that states some value in a UI element is incorrect so does a quick-and-dirty fix by attaching to some event and updates that control. Another one later comes and does another quick fix by doing the same someplace else etc.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;But things depend on one another, don’t they?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Yes, they do. You will always have coupling, but you can have loose-coupling or tight-coupling. And while sometimes a bit of tight coupling is inevitable, one thing you want to avoid at all costs is circular references. If component A depends on B, and B depends on A, if you want to do changes, you need to change both at the same time. An example of this is the following: your UI will always have references to your business layer, but you should never reference the UI from the business — you just created a bidirectional monolithic bloc.&lt;/p&gt;

&lt;h2 id=&quot;flux-as-a-real-world-example&quot;&gt;Flux As A Real World Example&lt;/h2&gt;

&lt;p&gt;All this stuff might seem a bit theoretical, so I thought I would use Flux as an example on how you can mitigate these problems.&lt;/p&gt;

&lt;p&gt;Here’s a high level overview of the architecture:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flux.png&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Explaining the concepts of Flux is beyond the scope of this article, but one key thing to take away from this architecture, is that the information flow is &lt;strong&gt;unidirectional&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Which leads us to…&lt;/p&gt;

&lt;h2 id=&quot;agnosticism&quot;&gt;Agnosticism&lt;/h2&gt;

&lt;p&gt;The general rule of thumb is that the components that are more prone to change, should depend on core components which are stable, and the stable ones should be agnostic of the other ones. The core components and interfaces (logging, routing, database access etc.) form the backbone of the application (the foundation, if you will) and the backbone should be closely guarded by the architect or the lead developer. The reason why you want to have this dependency topology (and not vice-versa), is because you don’t want a small change by John The-New-Guy in the model of the /socks-and-ties page of your online store application, to bring down everything. Also remember, that you should really give a good thought to the foundation, because after you’ve build level one and two of your structure, it’s really damn hard to make changes to the foundation because the whole thing rests on top of it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/motherboard.png&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive, img-left&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Imagine a computer. It has a motherboard, a processor, video card, memory, a hard-drive etc. The processor is a nicely encapsulated box, which communicates with the other nicely encapsulated boxes through well defined interfaces (the slot it’s fitted in, the other slots of the components in the mother board — all of these are industry standards). Regardless who makes the motherboard (MSI, Asus), the interfaces are the same for a specific hardware architecture. So let’s say, I get pissed at my video card for being so slow. Or with the hard drive, because I want an SSD. All I have to do is swap it with another one, just that simple. This is what loose coupling is. Now imagine if the CPU had wires directly to the video-card, memory or hard-drive. If you’d wanted to change something, you’d have to trow the whole computer away and buy another one. Also, a keep in mind that a CPU has more than a billion transistors, but it’s socket has only hundreds of pins. Now, that’s encapsulation! The more state you can keep private in a class, the better, because over time there will be other code that links to it, which means tight coupling.&lt;/p&gt;

&lt;p&gt;So the next time you want to call a component from another component directly, it might be worth it to consider an abstraction layer. Lastly, there is such a thing as the law of diminishing returns. It’s really easy to over-engineer stuff in the name of code art.&lt;/p&gt;</content><author><name></name></author><summary type="html">When you are writing code, you are usually not working alone. That means working with other people’s code, so they need to understand your code and you need to understand theirs. Good code is something that you can understand by reading, not by debugging it (because debugging is an order of magnitude more time consuming. That means a few conditions need to be met.</summary></entry><entry><title type="html">Tail Call Optimizations In F#</title><link href="http://localhost:4000/jekyll/update/2017/04/07/tail-calls-fsharp.html" rel="alternate" type="text/html" title="Tail Call Optimizations In F#" /><published>2017-04-07T06:39:37+03:00</published><updated>2017-04-07T06:39:37+03:00</updated><id>http://localhost:4000/jekyll/update/2017/04/07/tail-calls-fsharp</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2017/04/07/tail-calls-fsharp.html">&lt;p&gt;I chose F# for this article because that’s the functional language I have most experience in, but the same concepts can be applied
to any language, even JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/fsharp.png&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s take a simple piece of code in F# that calculates the sum of a large sequence. And let’s say this sequence is being
evaluated on the fly, so we don’t know how long it is (but it can be very long). A sequence is just the equivalent of an
Enumerable and that’s how it’s actually implemented under the hood in the CLR, so it can even be infinite — but if it’s
infinite, obviously summation will fail. The reason why I am using a sequence instead of a list is because a lot of the time
in F# we abstract the data reading part of a process in the form of an IEnumerable that yields data, similar to C#.
Now obviously when dealing with sequences, there are a lot of prebuilt functions — so you won’t need to implement a Sum() function,
but let’s say we want to implement our own for the sake of argument.&lt;/p&gt;

&lt;p&gt;A lot of the stuff that we are doing in F# is based on functions which are recursive, because pure functional programming is
stateless (so no iterating blocks that update a state variable). So it will look like this:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/dde7beeffb3be1fded7625ee83cc424a.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;But what happens if our collection is so big, that the code will throw a stack overflow exception?&lt;/p&gt;

&lt;h2 id=&quot;enter-tail-call-optimizations&quot;&gt;Enter Tail Call Optimizations&lt;/h2&gt;

&lt;p&gt;It turns out that if the recursive call is the last instruction in the method, the F# compiler is smart enough to replace
recursive calls with sequential goto calls, because there’s nothing to do afterwards (hence, no need to save a stack-frame
with the current execution state on the stack). So let’s revisit the code we wrote and explain why it isn’t tail optimized.
We are going to break the last instruction into separate instructions like so:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/37e7c80a19120b8e753ad78d5d60e9bd.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;You can clearly see that the recursive call isn’t the last instruction in the method, so the compiler won’t be able to do the
optimization we just talked about. Maybe there is a way to rewrite our code so that we can actually achieve this purpose. There
actually is. We are going to use accumulators.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/5f00ac59005c1be59a4c8f6fd03bb989.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;This is tail optimized because we can write it like this:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/454fb0e3a21390655adac66296b830bc.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;So what we are doing is simply adding the sum in a local value which we are passing along recursively. This is as close a thing to
state we have in purely functional programming. The problem with this code is that it is not very nice, because we need to initialize
it with the starting value for the accumulator. A nice feature of functional programming is that we can create nested functions like so:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toaderflorin/b1db2d67965aac6649628cfa7d630b47.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;We just encapsulated our “ugly” function inside a “nice” one and we are exposing a proper signature. Our internal function is
also nicely recursion tail optimized. This is how all the default F# functions are implemented so you can be sure that when you
are using them, they will not blow up your stack. A word of causing for those looking to implement a functional programming style
in C#: Tail optimization doesn’t always work. The JIT will produce optimized code for .NET applications running on 64 bit machines
with “Platform target: Any CPU” or for a 64 bit target. Any other combination will result in unoptimized code.&lt;/p&gt;</content><author><name></name></author><summary type="html">I chose F# for this article because that’s the functional language I have most experience in, but the same concepts can be applied to any language, even JavaScript.</summary></entry></feed>